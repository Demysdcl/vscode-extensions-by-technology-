"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getService = exports.getLanguageServiceForDocument = exports.getLanguageServiceForPath = void 0;
const path_1 = require("path");
const typescript_1 = __importDefault(require("typescript"));
const logger_1 = require("../../logger");
const importPackage_1 = require("../../importPackage");
const DocumentSnapshot_1 = require("./DocumentSnapshot");
const module_loader_1 = require("./module-loader");
const SnapshotManager_1 = require("./SnapshotManager");
const utils_1 = require("./utils");
const configLoader_1 = require("../../lib/documents/configLoader");
const services = new Map();
async function getLanguageServiceForPath(path, workspaceUris, docContext) {
    return (await getService(path, workspaceUris, docContext)).getService();
}
exports.getLanguageServiceForPath = getLanguageServiceForPath;
async function getLanguageServiceForDocument(document, workspaceUris, docContext) {
    return getLanguageServiceForPath(document.getFilePath() || '', workspaceUris, docContext);
}
exports.getLanguageServiceForDocument = getLanguageServiceForDocument;
async function getService(path, workspaceUris, docContext) {
    const tsconfigPath = utils_1.findTsConfigPath(path, workspaceUris);
    let service;
    if (services.has(tsconfigPath)) {
        service = await services.get(tsconfigPath);
    }
    else {
        logger_1.Logger.log('Initialize new ts service at ', tsconfigPath);
        const newService = createLanguageService(tsconfigPath, docContext);
        services.set(tsconfigPath, newService);
        service = await newService;
    }
    return service;
}
exports.getService = getService;
async function createLanguageService(tsconfigPath, docContext) {
    const workspacePath = tsconfigPath ? path_1.dirname(tsconfigPath) : '';
    const { options: compilerOptions, fileNames: files, raw } = getParsedConfig();
    // raw is the tsconfig merged with extending config
    // see: https://github.com/microsoft/TypeScript/blob/08e4f369fbb2a5f0c30dee973618d65e6f7f09f8/src/compiler/commandLineParser.ts#L2537
    const snapshotManager = new SnapshotManager_1.SnapshotManager(files, raw, workspacePath || process.cwd());
    // Load all configs within the tsconfig scope and the one above so that they are all loaded
    // by the time they need to be accessed synchronously by DocumentSnapshots to determine
    // the default language.
    await configLoader_1.configLoader.loadConfigs(workspacePath);
    const svelteModuleLoader = module_loader_1.createSvelteModuleLoader(getSnapshot, compilerOptions);
    let svelteTsPath;
    try {
        // For when svelte2tsx is part of node_modules, for example VS Code extension
        svelteTsPath = path_1.dirname(require.resolve('svelte2tsx'));
    }
    catch (e) {
        // Fall back to dirname, for example for svelte-check
        svelteTsPath = __dirname;
    }
    const svelteTsxFiles = [
        './svelte-shims.d.ts',
        './svelte-jsx.d.ts',
        './svelte-native-jsx.d.ts'
    ].map((f) => typescript_1.default.sys.resolvePath(path_1.resolve(svelteTsPath, f)));
    const host = {
        getCompilationSettings: () => compilerOptions,
        getScriptFileNames: () => Array.from(new Set([
            ...snapshotManager.getProjectFileNames(),
            ...snapshotManager.getFileNames(),
            ...svelteTsxFiles
        ])),
        getScriptVersion: (fileName) => getSnapshot(fileName).version.toString(),
        getScriptSnapshot: getSnapshot,
        getCurrentDirectory: () => workspacePath,
        getDefaultLibFileName: typescript_1.default.getDefaultLibFilePath,
        fileExists: svelteModuleLoader.fileExists,
        readFile: svelteModuleLoader.readFile,
        resolveModuleNames: svelteModuleLoader.resolveModuleNames,
        readDirectory: svelteModuleLoader.readDirectory,
        getDirectories: typescript_1.default.sys.getDirectories,
        useCaseSensitiveFileNames: () => typescript_1.default.sys.useCaseSensitiveFileNames,
        getScriptKind: (fileName) => getSnapshot(fileName).scriptKind
    };
    let languageService = typescript_1.default.createLanguageService(host);
    const transformationConfig = {
        strictMode: !!compilerOptions.strict,
        transformOnTemplateError: docContext.transformOnTemplateError
    };
    return {
        tsconfigPath,
        compilerOptions,
        getService: () => languageService,
        updateSnapshot,
        deleteSnapshot,
        snapshotManager
    };
    function deleteSnapshot(filePath) {
        svelteModuleLoader.deleteFromModuleCache(filePath);
        snapshotManager.delete(filePath);
    }
    function updateSnapshot(documentOrFilePath) {
        return typeof documentOrFilePath === 'string'
            ? updateSnapshotFromFilePath(documentOrFilePath)
            : updateSnapshotFromDocument(documentOrFilePath);
    }
    function updateSnapshotFromDocument(document) {
        const filePath = document.getFilePath() || '';
        const prevSnapshot = snapshotManager.get(filePath);
        if ((prevSnapshot === null || prevSnapshot === void 0 ? void 0 : prevSnapshot.version) === document.version) {
            return prevSnapshot;
        }
        const newSnapshot = DocumentSnapshot_1.DocumentSnapshot.fromDocument(document, transformationConfig);
        snapshotManager.set(filePath, newSnapshot);
        if (prevSnapshot && prevSnapshot.scriptKind !== newSnapshot.scriptKind) {
            // Restart language service as it doesn't handle script kind changes.
            languageService.dispose();
            languageService = typescript_1.default.createLanguageService(host);
        }
        return newSnapshot;
    }
    function updateSnapshotFromFilePath(filePath) {
        const prevSnapshot = snapshotManager.get(filePath);
        if (prevSnapshot) {
            return prevSnapshot;
        }
        const newSnapshot = DocumentSnapshot_1.DocumentSnapshot.fromFilePath(filePath, docContext.createDocument, transformationConfig);
        snapshotManager.set(filePath, newSnapshot);
        return newSnapshot;
    }
    function getSnapshot(fileName) {
        fileName = utils_1.ensureRealSvelteFilePath(fileName);
        let doc = snapshotManager.get(fileName);
        if (doc) {
            return doc;
        }
        doc = DocumentSnapshot_1.DocumentSnapshot.fromFilePath(fileName, docContext.createDocument, transformationConfig);
        snapshotManager.set(fileName, doc);
        return doc;
    }
    function getParsedConfig() {
        const forcedCompilerOptions = {
            allowNonTsExtensions: true,
            target: typescript_1.default.ScriptTarget.Latest,
            module: typescript_1.default.ModuleKind.ESNext,
            moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
            allowJs: true,
            noEmit: true,
            declaration: false,
            skipLibCheck: true,
            // these are needed to handle the results of svelte2tsx preprocessing:
            jsx: typescript_1.default.JsxEmit.Preserve
        };
        // always let ts parse config to get default compilerOption
        let configJson = (tsconfigPath && typescript_1.default.readConfigFile(tsconfigPath, typescript_1.default.sys.readFile).config) ||
            getDefaultJsConfig();
        // Only default exclude when no extends for now
        if (!configJson.extends) {
            configJson = Object.assign({
                exclude: getDefaultExclude()
            }, configJson);
        }
        const parsedConfig = typescript_1.default.parseJsonConfigFileContent(configJson, typescript_1.default.sys, workspacePath, forcedCompilerOptions, tsconfigPath, undefined, [{ extension: 'svelte', isMixedContent: false, scriptKind: typescript_1.default.ScriptKind.TSX }]);
        const compilerOptions = {
            ...parsedConfig.options,
            ...forcedCompilerOptions
        };
        // detect which JSX namespace to use (svelte | svelteNative) if not specified or not compatible
        if (!compilerOptions.jsxFactory || !compilerOptions.jsxFactory.startsWith('svelte')) {
            //default to regular svelte, this causes the usage of the "svelte.JSX" namespace
            compilerOptions.jsxFactory = 'svelte.createElement';
            //override if we detect svelte-native
            if (workspacePath) {
                try {
                    const svelteNativePkgInfo = importPackage_1.getPackageInfo('svelte-native', workspacePath);
                    if (svelteNativePkgInfo.path) {
                        compilerOptions.jsxFactory = 'svelteNative.createElement';
                    }
                }
                catch (e) {
                    //we stay regular svelte
                }
            }
        }
        return {
            ...parsedConfig,
            options: compilerOptions
        };
    }
    /**
     * This should only be used when there's no jsconfig/tsconfig at all
     */
    function getDefaultJsConfig() {
        return {
            compilerOptions: {
                maxNodeModuleJsDepth: 2,
                allowSyntheticDefaultImports: true
            },
            // Necessary to not flood the initial files
            // with potentially completely unrelated .ts/.js files:
            include: []
        };
    }
    function getDefaultExclude() {
        return ['node_modules', ...SnapshotManager_1.ignoredBuildDirectories];
    }
}
//# sourceMappingURL=service.js.map