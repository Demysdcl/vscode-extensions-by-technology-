'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const VSCode = require("vscode");
const vscode_languageclient_1 = require("vscode-languageclient");
function registerClasspathService(client) {
    let addRequest = new vscode_languageclient_1.RequestType("sts/addClasspathListener");
    client.onRequest(addRequest, (params) => __awaiter(this, void 0, void 0, function* () {
        return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.addClasspathListener", params.callbackCommandId);
    }));
    let removeRequest = new vscode_languageclient_1.RequestType("sts/removeClasspathListener");
    client.onRequest(removeRequest, (params) => __awaiter(this, void 0, void 0, function* () {
        return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.removeClasspathListener", params.callbackCommandId);
    }));
}
exports.registerClasspathService = registerClasspathService;
//# sourceMappingURL=classpath.js.map