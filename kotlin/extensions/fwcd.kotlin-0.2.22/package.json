{
	"name": "kotlin",
	"displayName": "Kotlin",
	"description": "Smart code completion, debugging, linting, syntax highlighting and more for Kotlin",
	"icon": "resources/Icon128.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/fwcd/vscode-kotlin.git"
	},
	"version": "0.2.22",
	"preview": true,
	"publisher": "fwcd",
	"license": "MIT",
	"categories": [
		"Programming Languages",
		"Debuggers",
		"Formatters",
		"Linters"
	],
	"keywords": [
		"kotlin",
		"ide",
		"debugger"
	],
	"activationEvents": [
		"onLanguage:kotlin",
		"onDebugInitialConfigurations",
		"onDebugResolve:kotlin"
	],
	"main": "./dist/extension",
	"contributes": {
		"languages": [
			{
				"id": "kotlin",
				"aliases": [
					"Kotlin"
				],
				"extensions": [
					".kt",
					".kts"
				],
				"configuration": "./resources/syntaxes/kotlin.configuration.json"
			}
		],
		"grammars": [
			{
				"language": "kotlin",
				"scopeName": "source.kotlin",
				"path": "./resources/syntaxes/Kotlin.tmLanguage.json"
			},
			{
				"scopeName": "markdown.kotlin.codeblock",
				"path": "./resources/syntaxes/codeblock.json",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.kotlin": "kotlin"
				}
			}
		],
		"commands": [
			{
				"command": "kotlin.languageServer.restart",
				"title": "Restart the Language Server",
				"category": "Kotlin"
			}
		],
		"breakpoints": [
			{
				"language": "kotlin"
			}
		],
		"debuggers": [
			{
				"type": "kotlin",
				"label": "Kotlin",
				"configurationAttributes": {
					"launch": {
						"required": [
							"projectRoot",
							"mainClass"
						],
						"properties": {
							"projectRoot": {
								"type": "string",
								"description": "Absolute path to your project's root folder. If you want to debug a subproject, specify the root/top-level directory here and the relative path in the 'subproject' attribute.",
								"default": "${workspaceFolder}"
							},
							"mainClass": {
								"type": "string",
								"description": "The fully qualified name of your main class (usually your filename in PascalCase postfixed with Kt).",
								"default": "path.to.your.MainClassKt"
							},
							"vmArguments": {
								"type": "string",
								"description": "The JVM arguments if needed by your project (usually -Dfoo=bar).",
								"default": ""
							},
							"enableJsonLogging": {
								"type": "boolean",
								"description": "Enables logging of debug server JSON messages into a file defined by 'jsonLogFile'.",
								"default": false
							},
							"jsonLogFile": {
								"type": "string",
								"description": "Enables logging of debug server JSON messages into a file defined by 'jsonLogFile'.",
								"default": "${workspaceFolder}/ktDebugJsonLog.txt"
							},
							"logLevel": {
								"type": "string",
								"description": "Sets the logging level of the debug server for the messages in the Debug Console [NONE/ERROR/WARN/INFO/DEBUG/TRACE/DEEP_TRACE/ALL].",
								"default": "INFO"
							}
						}
					},
					"attach": {
						"required": [
							"projectRoot",
							"hostName",
							"port",
							"timeout"
						],
						"properties": {
							"projectRoot": {
								"type": "string",
								"description": "Absolute path to your project's root folder. If you want to debug a subproject, specify the root/top-level directory here and the relative path in the 'subproject' attribute.",
								"default": "${workspaceFolder}"
							},
							"hostName": {
								"type": "string",
								"description": "The host name of your running JVM.",
								"default": "localhost"
							},
							"port": {
								"type": "number",
								"description": "The port number of your running JVM.",
								"default": 8000
							},
							"timeout": {
								"type": "number",
								"description": "The connection timeout.",
								"default": 30000
							},
							"enableJsonLogging": {
								"type": "boolean",
								"description": "Enables logging of debug server JSON messages into a file defined by 'jsonLogFile'.",
								"default": false
							},
							"jsonLogFile": {
								"type": "string",
								"description": "Enables logging of debug server JSON messages into a file defined by 'jsonLogFile'.",
								"default": "${workspaceFolder}/ktDebugJsonLog.txt"
							},
							"logLevel": {
								"type": "string",
								"description": "Sets the logging level of the debug server for the messages in the Debug Console [NONE/ERROR/WARN/INFO/DEBUG/TRACE/DEEP_TRACE/ALL].",
								"default": "INFO"
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "kotlin",
						"request": "launch",
						"name": "Kotlin Launch",
						"projectRoot": "${workspaceFolder}",
						"mainClass": "path.to.your.MainClassKt"
					}
				],
				"configurationSnippets": [
					{
						"label": "Kotlin: Launch Project",
						"description": "A new Kotlin launch configuration",
						"body": {
							"type": "kotlin",
							"request": "launch",
							"name": "Kotlin Launch",
							"projectRoot": "^\"\\${workspaceFolder}\"",
							"mainClass": "path.to.your.MainClassKt"
						}
					},
					{
						"label": "Kotlin: Attach VM",
						"description": "Attaches a debugger to a running JVM",
						"body": {
							"type": "kotlin",
							"request": "attach",
							"name": "Kotlin Attach",
							"hostName": "localhost",
							"port": 8000,
							"timeout": 30000
						}
					}
				]
			}
		],
		"configuration": {
			"title": "Kotlin",
			"properties": {
				"kotlin.languageServer.enabled": {
					"type": "boolean",
					"default": true,
					"description": "[Recommended] Specifies whether the language server should be used. When enabled the extension will provide code completions and linting, otherwise just syntax highlighting. Might require a reload to apply."
				},
				"kotlin.languageServer.path": {
					"type": "string",
					"default": "",
					"description": "Optionally a custom path to the language server executable."
				},
				"kotlin.languageServer.transport": {
					"type": "string",
					"enum": [
						"stdio",
						"tcp"
					],
					"description": "The transport layer beneath the language server protocol. Note that the extension will launch the server even if a TCP socket is used.",
					"default": "stdio"
				},
				"kotlin.languageServer.port": {
					"type": "integer",
					"description": "The port to which the client will attempt to connect to. A random port is used if zero. Only used if the transport layer is TCP.",
					"default": 0
				},
				"kotlin.languageServer.debugAttach.enabled": {
					"type": "boolean",
					"description": "[DEBUG] Whether the language server should listen for debuggers, i.e. be debuggable while running in VSCode. This is ONLY useful if you need to debug the language server ITSELF.",
					"default": false
				},
				"kotlin.languageServer.debugAttach.port": {
					"type": "integer",
					"description": "[DEBUG] If transport is stdio this enables you to attach to the running langugage server with a debugger. This is ONLY useful if you need to debug the language server ITSELF.",
					"default": 5005
				},
				"kotlin.languageServer.debugAttach.autoSuspend": {
					"type": "boolean",
					"description": "[DEBUG] If enabled (together with debugAttach.enabled), the language server will not immediately launch but instead listen on the specified attach port and wait for a debugger. This is ONLY useful if you need to debug the language server ITSELF.",
					"default": false
				},
				"kotlin.trace.server": {
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VSCode and the Kotlin language server.",
					"scope": "window"
				},
				"kotlin.compiler.jvm.target": {
					"type": "string",
					"default": "default",
					"description": "Specifies the JVM target, e.g. \"1.6\" or \"1.8\""
				},
				"kotlin.linting.debounceTime": {
					"type": "integer",
					"default": 250,
					"description": "[DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possibile stability issues."
				},
				"kotlin.indexing.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Whether global symbols in the project should be indexed automatically in the background. This enables e.g. code completion for unimported classes and functions."
				},
				"kotlin.completion.snippets.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether code completion should provide snippets (true) or plain-text items (false)."
				},
				"kotlin.debugAdapter.enabled": {
					"type": "boolean",
					"default": true,
					"description": "[Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available."
				},
				"kotlin.debugAdapter.path": {
					"type": "string",
					"default": "",
					"description": "Optionally a custom path to the debug adapter executable."
				},
				"kotlin.debounceTime": {
					"type": "integer",
					"default": 250,
					"description": "[DEPRECATED] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possibile stability issues.",
					"deprecationMessage": "Use 'kotlin.linting.debounceTime' instead"
				},
				"kotlin.externalSources.useKlsScheme": {
					"type": "boolean",
					"default": true,
					"description": "[Recommended] Specifies whether URIs inside JARs should be represented using the 'kls'-scheme."
				},
				"kotlin.externalSources.autoConvertToKotlin": {
					"type": "boolean",
					"default": true,
					"description": "Specifies whether decompiled/external classes should be auto-converted to Kotlin."
				},
				"kotlin.snippetsEnabled": {
					"type": "boolean",
					"default": true,
					"description": "[DEPRECATED] Specifies whether code completion should provide snippets (true) or plain-text items (false).",
					"deprecationMessage": "Use 'kotlin.completion.snippets.enabled'"
				}
			}
		}
	},
	"scripts": {
		"compile": "tsc -p ./",
		"watch": "webpack --mode development -w",
		"prepare": "node ./scripts/downloadGrammar.js",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"vscode:prepublish": "webpack --mode production",
		"package-extension": "vsce package",
		"publish-extension": "vsce publish",
		"test": "node ./node_modules/vscode/bin/test"
	},
	"engines": {
		"vscode": "^1.41.0"
	},
	"devDependencies": {
		"@types/extract-zip": "^1.6.2",
		"@types/mocha": "^7.0.2",
		"@types/node": "^12.8.1",
		"@types/request-promise-native": "^1.0.17",
		"@types/semver": "^7.2.0",
		"ts-loader": "^7.0.5",
		"typescript": "^3.9.3",
		"vsce": "1.75.0",
		"vscode": "^1.1.37",
		"webpack": "^4.43.0",
		"webpack-cli": "^3.3.11"
	},
	"dependencies": {
		"extract-zip": "^2.0.0",
		"request": "^2.88.2",
		"request-progress": "^3.0.0",
		"request-promise-native": "^1.0.8",
		"semver": "^7.3.2",
		"vscode-debugadapter": "^1.41.0",
		"vscode-debugprotocol": "^1.41.0",
		"vscode-languageclient": "^6.1.3"
	},
	"__metadata": {
		"id": "c86bc8a9-fd3b-44db-b28a-2d146cb78d3c",
		"publisherId": "11fffb01-8ad1-43db-902d-06159b6d504a",
		"publisherDisplayName": "fwcd",
		"installedTimestamp": 1619184562194
	}
}