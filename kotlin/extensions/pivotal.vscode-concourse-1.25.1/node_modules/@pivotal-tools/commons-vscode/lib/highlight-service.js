"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HighlightService = exports.toVSRange = void 0;
const VSCode = require("vscode");
function toVSRange(rng) {
    return new VSCode.Range(toPosition(rng.start), toPosition(rng.end));
}
exports.toVSRange = toVSRange;
function toPosition(p) {
    return new VSCode.Position(p.line, p.character);
}
class HighlightService {
    constructor() {
        this.DECORATION = VSCode.window.createTextEditorDecorationType({
            // before: {
            //     contentIconPath: path.resolve(__dirname, "../icons/boot-12h.png"),
            //     margin: '2px 2px 0px 0px'
            // },
            backgroundColor: 'rgba(109,179,63,0.25)',
            borderColor: 'rgba(109,179,63,0.25)',
            borderSpacing: '4px',
            borderRadius: '4px',
            borderWidth: '4px'
        });
        this.highlights = new Map();
        VSCode.window.onDidChangeActiveTextEditor(editor => this.updateHighlightsForEditor(editor));
    }
    dispose() {
        this.DECORATION.dispose();
    }
    handle(params) {
        this.highlights.set(params.doc.uri, params);
        this.refresh(params.doc);
    }
    refresh(docId) {
        let editors = VSCode.window.visibleTextEditors;
        for (let editor of editors) {
            const activeUri = editor.document.uri.toString();
            const activeVersion = editor.document.version;
            if (docId.uri === activeUri && docId.version === activeVersion) {
                //We only update highlights in the active editor for now
                this.updateHighlightsForEditor(editor);
            }
        }
    }
    updateHighlightsForEditor(editor) {
        if (editor) {
            const highlightParams = this.highlights.get(editor.document.uri.toString());
            const highlights = (highlightParams === null || highlightParams === void 0 ? void 0 : highlightParams.codeLenses) || [];
            let decorations = highlights.map(hl => toVSRange(hl.range));
            editor.setDecorations(this.DECORATION, decorations);
        }
    }
}
exports.HighlightService = HighlightService;
//# sourceMappingURL=highlight-service.js.map