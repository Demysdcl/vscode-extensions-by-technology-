{"version":3,"file":"Exceptions.js","sourceRoot":"","sources":["../../AutoCollection/Exceptions.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\r\n\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport Sender = require(\"../Library/Sender\");\r\nimport Queue = require(\"../Library/Channel\");\r\nimport Util = require(\"../Library/Util\");\r\n\r\nclass AutoCollectExceptions {\r\n\r\n    public static INSTANCE: AutoCollectExceptions = null;\r\n    public static get UNCAUGHT_EXCEPTION_HANDLER_NAME(): string { return \"uncaughtException\"; }\r\n    public static get UNHANDLED_REJECTION_HANDLER_NAME(): string { return \"unhandledRejection\"; }\r\n\r\n    private static _FALLBACK_ERROR_MESSAGE = \"A promise was rejected without providing an error. Application Insights generated this error stack for you.\";\r\n    private _exceptionListenerHandle: (reThrow: boolean, error: Error) => void;\r\n    private _rejectionListenerHandle: (reThrow: boolean, error: Error) => void;\r\n    private _client: TelemetryClient;\r\n    private _isInitialized: boolean;\r\n\r\n    constructor(client: TelemetryClient) {\r\n        if (!!AutoCollectExceptions.INSTANCE) {\r\n            throw new Error(\"Exception tracking should be configured from the applicationInsights object\");\r\n        }\r\n\r\n        AutoCollectExceptions.INSTANCE = this;\r\n        this._client = client;\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        if (isEnabled) {\r\n            this._isInitialized = true;\r\n            var self = this;\r\n            if (!this._exceptionListenerHandle) {\r\n                // For scenarios like Promise.reject(), an error won't be passed to the handle. Create a placeholder\r\n                // error for these scenarios.\r\n                var handle = (reThrow: boolean, error: Error = new Error(AutoCollectExceptions._FALLBACK_ERROR_MESSAGE)) => {\r\n                    this._client.trackException({ exception: error });\r\n                    this._client.flush({ isAppCrashing: true });\r\n                    if (reThrow) {\r\n                        var THIS_IS_APPLICATION_INSIGHTS_RETHROWING_YOUR_EXCEPTION = error;\r\n                        throw THIS_IS_APPLICATION_INSIGHTS_RETHROWING_YOUR_EXCEPTION; // Error originated somewhere else in your app\r\n                    }\r\n                };\r\n                this._exceptionListenerHandle = handle.bind(this, true);\r\n                this._rejectionListenerHandle = handle.bind(this, false);\r\n\r\n                process.on(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\r\n                process.on(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\r\n            }\r\n\r\n        } else {\r\n            if (this._exceptionListenerHandle) {\r\n                process.removeListener(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\r\n                process.removeListener(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\r\n                this._exceptionListenerHandle = undefined;\r\n                this._rejectionListenerHandle = undefined;\r\n                delete this._exceptionListenerHandle;\r\n                delete this._rejectionListenerHandle;\r\n            }\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        AutoCollectExceptions.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport = AutoCollectExceptions;\r\n"]}