"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotFragmentMap = exports.isNoTextSpanInGeneratedCode = exports.isInGeneratedCode = exports.getComponentAtPosition = void 0;
const documents_1 = require("../../../lib/documents");
const DocumentSnapshot_1 = require("../DocumentSnapshot");
/**
 * If the given original position is within a Svelte starting tag,
 * return the snapshot of that component.
 */
function getComponentAtPosition(lsAndTsDocResovler, lang, doc, tsDoc, fragment, originalPosition) {
    var _a;
    if (tsDoc.parserError) {
        return null;
    }
    if (documents_1.isInTag(originalPosition, doc.scriptInfo) ||
        documents_1.isInTag(originalPosition, doc.moduleScriptInfo)) {
        // Inside script tags -> not a component
        return null;
    }
    const node = documents_1.getNodeIfIsInComponentStartTag(doc.html, doc.offsetAt(originalPosition));
    if (!node) {
        return null;
    }
    const generatedPosition = fragment.getGeneratedPosition(doc.positionAt(node.start + 1));
    const def = (_a = lang.getDefinitionAtPosition(tsDoc.filePath, fragment.offsetAt(generatedPosition))) === null || _a === void 0 ? void 0 : _a[0];
    if (!def) {
        return null;
    }
    const snapshot = lsAndTsDocResovler.getSnapshot(def.fileName);
    if (!(snapshot instanceof DocumentSnapshot_1.SvelteDocumentSnapshot)) {
        return null;
    }
    return snapshot;
}
exports.getComponentAtPosition = getComponentAtPosition;
/**
 * Checks if this a section that should be completely ignored
 * because it's purely generated.
 */
function isInGeneratedCode(text, start, end) {
    const lineStart = text.lastIndexOf('\n', start);
    const lineEnd = text.indexOf('\n', end);
    return (text.substring(lineStart, start).includes('/*立ignore_start立*/') &&
        text.substring(end, lineEnd).includes('/*立ignore_end立*/'));
}
exports.isInGeneratedCode = isInGeneratedCode;
/**
 * Checks that this isn't a text span that should be completely ignored
 * because it's purely generated.
 */
function isNoTextSpanInGeneratedCode(text, span) {
    return !isInGeneratedCode(text, span.start, span.start + span.length);
}
exports.isNoTextSpanInGeneratedCode = isNoTextSpanInGeneratedCode;
class SnapshotFragmentMap {
    constructor(resolver) {
        this.resolver = resolver;
        this.map = new Map();
    }
    set(fileName, content) {
        this.map.set(fileName, content);
    }
    get(fileName) {
        return this.map.get(fileName);
    }
    getFragment(fileName) {
        var _a;
        return (_a = this.map.get(fileName)) === null || _a === void 0 ? void 0 : _a.fragment;
    }
    async retrieve(fileName) {
        let snapshotFragment = this.get(fileName);
        if (!snapshotFragment) {
            const snapshot = this.resolver.getSnapshot(fileName);
            const fragment = await snapshot.getFragment();
            snapshotFragment = { fragment, snapshot };
            this.set(fileName, snapshotFragment);
        }
        return snapshotFragment;
    }
    async retrieveFragment(fileName) {
        return (await this.retrieve(fileName)).fragment;
    }
}
exports.SnapshotFragmentMap = SnapshotFragmentMap;
//# sourceMappingURL=utils.js.map