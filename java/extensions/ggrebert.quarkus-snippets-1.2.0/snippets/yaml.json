{
    "DockerCompose - PostgreSQL service": {
        "prefix": [
            "postgresql-service"
        ],
        "description": "Create a PostgreSQL service",
        "body": [
            "${1:db}:",
            "\timage: postgres:${2:alpine}",
            "\tenvironment:",
            "\t\tPOSTGRES_PASSWORD: ${3:superSecret}",
            "\t\tPOSTGRES_USER: ${4:user}",
            "\t\tPOSTGRES_DB: ${5:db}",
            "\thealthcheck:",
            "\t\ttest: ['CMD-SHELL', 'pg_isready -U postgres']",
            "\t\tinterval: 10s",
            "\t\ttimeout: 5s",
            "\t\tretries: 5",
            ""
        ]
    },
    "DockerCompose - MySQL service": {
        "prefix": [
            "mysql-service",
            "mariadb-service"
        ],
        "description": "Create a MySQL service",
        "body": [
            "${1:db}:",
            "\timage: ${2|mariadb,mysql|}:${3:latest}",
            "\tenvironment:",
            "\t\tMYSQL_ROOT_PASSWORD: ${4:superSecret}",
            "\t\tMYSQL_PASSWORD: ${5:superSecret}",
            "\t\tMYSQL_USER: ${6:user}",
            "\t\tMYSQL_DATABASE: ${7:db}",
            "\thealthcheck:",
            "\t\ttest: ['CMD', 'mysqladmin ping -h localhost']",
            "\t\tinterval: 10s",
            "\t\ttimeout: 5s",
            "\t\tretries: 5",
            ""
        ]
    },
    "DockerCompose - Keycloak": {
        "prefix": [
            "keycloak-service"
        ],
        "description": "Create a Keycloak SSO service",
        "body": [
            "${1:keycloak}:",
            "\timage: jboss/keycloak:${2:latest}",
            "\tenvironment:",
            "\t\tKEYCLOAK_USER: ${3:admin}",
            "\t\tKEYCLOAK_PASSWORD: ${4:superSecret}",
            "\t\tDB_VENDOR: postgres",
            "\t\tDB_ADDR: keycloak-db",
            "\t\tDB_DATABASE: keycloak",
            "\t\tDB_USER: keycloak",
            "\t\tDB_PASSWORD: keycloak",
            "\tdepends_on:",
            "\t\tkeycloak-db:",
            "\t\t\tcondition: service_healthy",
            "\tports:",
            "\t\t- ${5:8081}:8080",
            "",
            "keycloak-db:",
            "\timage: postgres:alpine",
            "\tenvironment:",
            "\t\tPOSTGRES_PASSWORD: keycloak",
            "\t\tPOSTGRES_USER: keycloak",
            "\t\tPOSTGRES_DB: keycloak",
            "\thealthcheck:",
            "\t\ttest: ['CMD-SHELL', 'pg_isready -U postgres']",
            "\t\tinterval: 10s",
            "\t\ttimeout: 5s",
            "\t\tretries: 5",
            ""
        ]
    },
    "DockerCompose - Jaeger": {
        "prefix": [
            "jaeger-service"
        ],
        "description": "Create a Jaeger service",
        "body": [
            "${1:jaeger}:",
            "\timage: jaegertracing/all-in-one:${2:latest}",
            "\tports:",
            "\t\t- ${3:16686}:16686",
            ""
        ]
    },
    "DockerCompose - Elasticsearch": {
        "prefix": [
            "elasticserch-service"
        ],
        "description": "Create a Elasticsearch service",
        "body": [
            "${1:elasticsearch}:",
            "\timage: docker.elastic.co/elasticsearch/elasticsearch${2:-oss}:${3:7.6.2}",
            "\tenvironment:",
            "\t\t- discovery.type=single-node",
            "\t\t- \"ES_JAVA_OPTS=-Xms${4:512m} -Xmx$4\"",
            "\tports:",
            "\t\t- ${5:9200}:9200",
            "\thealthcheck:",
            "\t\ttest: ['CMD-SHELL', 'curl -f http://127.0.0.1:9200/_cluster/health?wait_for_status=yellow']",
            "\t\tinterval: 10s",
            "\t\ttimeout: 5s",
            "\t\tretries: 10",
            ""
        ]
    },
    "DockerCompose - Kibana": {
        "prefix": [
            "kibana-service"
        ],
        "description": "Create a Kibana service",
        "body": [
            "${1:kibana}:",
            "\timage: docker.elastic.co/kibana/kibana${2:-oss}:${3:7.6.2}",
            "\tenvironment:",
            "\t\tELASTICSEARCH_HOSTS: ${4:http://elasticsearch:9200}",
            "\tdepends_on:",
            "\t\t${5:elasticsearch}:",
            "\t\t\tcondition: service_healthy",
            "\tports:",
            "\t\t- ${6:5601}:5601",
            "\thealthcheck:",
            "\t\ttest: ['CMD-SHELL', 'curl -f http://127.0.0.1:5601/api/status']",
            "\t\tinterval: 10s",
            "\t\ttimeout: 5s",
            "\t\tretries: 5",
            ""
        ]
    },
    "DockerCompose - Logstash": {
        "prefix": [
            "logstash-service"
        ],
        "description": "Create a Logstash service",
        "body": [
            "${1:logstash}:",
            "\timage: docker.elastic.co/logstash/logstash${2:-oss}:${3:7.6.2}",
            "\tvolumes:",
            "\t\t- ${4:./logstash.yml}:/usr/share/logstash/config/logstash.yml:ro",
            "\t\t- ${5:./pipeline/}:/usr/share/logstash/pipeline/:ro",
            "\tports:",
            "\t\t- ${6:5000:5000}",
            "\tdepends_on:",
            "\t\t${7:elasticsearch}:",
            "\t\t\tcondition: service_healthy",
            "\thealthcheck:",
            "\t\ttest: ['CMD-SHELL', 'curl -f http://127.0.0.1:9600']",
            "\t\tinterval: 10s",
            "\t\ttimeout: 5s",
            "\t\tretries: 5",
            ""
        ]
    },
}
