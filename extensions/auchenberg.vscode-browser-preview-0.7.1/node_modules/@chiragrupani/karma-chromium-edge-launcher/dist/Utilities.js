"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class Utilities {
    static GetLinuxBin(command) {
        // Only run these checks on Linux
        if (process.platform !== 'linux') {
            return null;
        }
        // Need to check if check for other paths is required
        const paths = [
            '/usr/local/sbin',
            '/usr/local/bin',
            '/usr/sbin',
            '/usr/bin',
            '/sbin',
            '/bin',
        ];
        var edgeBIN = '/usr/bin/' + command;
        try {
            fs_1.default.accessSync(edgeBIN, fs_1.default.constants.X_OK);
            return command;
        }
        catch (e) { }
        return null;
    }
    static GetEdgeDarwin(defaultPath) {
        if (process.platform !== 'darwin') {
            return null;
        }
        try {
            var homePath = path_1.default.join(process.env.HOME || '', defaultPath);
            fs_1.default.accessSync(homePath);
            return homePath;
        }
        catch (e) {
            return defaultPath;
        }
    }
    // Return location of Edge.exe file for a given directory.
    static GetEdgeExe(edgeDirName) {
        // Only run these checks on win32
        if (process.platform !== 'win32') {
            return null;
        }
        var suffix = '\\Microsoft\\' + edgeDirName + '\\Application\\msedge.exe';
        var prefixes = [
            process.env['PROGRAMFILES(X86)'],
            process.env.PROGRAMFILES,
            process.env.LOCALAPPDATA,
        ];
        var edgePath = '';
        for (let i = 0; i < prefixes.length; i++) {
            try {
                var windowsEdgeDirectory = path_1.default.join(prefixes[i] || '', suffix);
                fs_1.default.accessSync(windowsEdgeDirectory);
                edgePath = windowsEdgeDirectory;
                break;
            }
            catch (e) { }
        }
        return edgePath;
    }
    static isJSFlags(flag) {
        return flag.indexOf('--js-flags=') === 0;
    }
    static sanitizeJSFlags(flag) {
        var test = /--js-flags=(['"])/.exec(flag);
        if (!test) {
            return flag;
        }
        var escapeChar = test[1];
        var endExp = new RegExp(escapeChar + '$');
        var startExp = new RegExp('--js-flags=' + escapeChar);
        return flag.replace(startExp, '--js-flags=').replace(endExp, '');
    }
}
exports.default = Utilities;
