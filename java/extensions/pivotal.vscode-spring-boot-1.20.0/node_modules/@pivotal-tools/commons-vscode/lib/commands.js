'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const VSCode = require("vscode");
function registerCommands(context) {
    VSCode.commands.getCommands(false).then(commands => {
        if (!commandExists(commands, "sts.open.url")) {
            registerOpenUrl(context, "sts.open.url");
        }
        if (!commandExists(commands, "sts.showHoverAtPosition")) {
            registerShowHoverAtPosition(context, "sts.showHoverAtPosition");
        }
    });
}
exports.registerCommands = registerCommands;
function registerOpenUrl(context, commandId) {
    context.subscriptions.push(VSCode.commands.registerCommand(commandId, (url) => {
        VSCode.commands.executeCommand('vscode.open', VSCode.Uri.parse(url));
    }));
}
function registerShowHoverAtPosition(context, commandId) {
    VSCode.commands.registerCommand(commandId, (position) => {
        const editor = VSCode.window.activeTextEditor;
        const vsPosition = new VSCode.Position(position.line, position.character);
        editor.selection = new VSCode.Selection(vsPosition, vsPosition);
        VSCode.commands.executeCommand('editor.action.showHover');
    });
}
function commandExists(commands, commandId) {
    return commands.indexOf(commandId) >= 0;
}
//# sourceMappingURL=commands.js.map