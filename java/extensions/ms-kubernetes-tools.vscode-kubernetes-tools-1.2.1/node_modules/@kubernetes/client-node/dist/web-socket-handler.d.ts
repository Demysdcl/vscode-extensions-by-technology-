/// <reference types="node" />
import stream = require('stream');
import ws = require('websocket');
import { V1Status } from './api';
import { KubeConfig } from './config';
export interface WebSocketInterface {
    connect(path: string, textHandler: ((text: string) => boolean) | null, binaryHandler: ((stream: number, buff: Buffer) => boolean) | null): Promise<ws.connection>;
}
export declare class WebSocketHandler implements WebSocketInterface {
    static readonly StdinStream: number;
    static readonly StdoutStream: number;
    static readonly StderrStream: number;
    static readonly StatusStream: number;
    static handleStandardStreams(streamNum: number, buff: Buffer, stdout: stream.Writable, stderr: stream.Writable): V1Status | null;
    static handleStandardInput(conn: ws.connection, stdin: stream.Readable | any, streamNum?: number): boolean;
    'config': KubeConfig;
    constructor(config: KubeConfig);
    /**
     * Connect to a web socket endpoint.
     * @param path The HTTP Path to connect to on the server.
     * @param textHandler Callback for text over the web socket.
     *      Returns true if the connection should be kept alive, false to disconnect.
     * @param binaryHandler Callback for binary data over the web socket.
     *      Returns true if the connection should be kept alive, false to disconnect.
     */
    connect(path: string, textHandler: ((text: string) => boolean) | null, binaryHandler: ((stream: number, buff: Buffer) => boolean) | null): Promise<ws.connection>;
}
