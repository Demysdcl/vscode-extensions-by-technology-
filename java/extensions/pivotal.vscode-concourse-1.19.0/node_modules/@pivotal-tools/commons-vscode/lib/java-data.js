"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const VSCode = require("vscode");
const vscode_languageclient_1 = require("vscode-languageclient");
function registerJavaDataService(client) {
    const javaTypeRequest = new vscode_languageclient_1.RequestType("sts/javaType");
    client.onRequest(javaTypeRequest, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.type", params); }));
    const javadocHoverLinkRequest = new vscode_languageclient_1.RequestType("sts/javadocHoverLink");
    client.onRequest(javadocHoverLinkRequest, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.javadocHoverLink", params); }));
    const javaLocationRequest = new vscode_languageclient_1.RequestType("sts/javaLocation");
    client.onRequest(javaLocationRequest, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.location", params); }));
    const javadocRequest = new vscode_languageclient_1.RequestType("sts/javadoc");
    client.onRequest(javadocRequest, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.javadoc", params); }));
    const javaSearchTypes = new vscode_languageclient_1.RequestType("sts/javaSearchTypes");
    client.onRequest(javaSearchTypes, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.search.types", params); }));
    const javaSearchPackages = new vscode_languageclient_1.RequestType("sts/javaSearchPackages");
    client.onRequest(javaSearchPackages, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.search.packages", params); }));
    const javaSubTypes = new vscode_languageclient_1.RequestType("sts/javaSubTypes");
    client.onRequest(javaSubTypes, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.hierarchy.subtypes", params); }));
    const javaSuperTypes = new vscode_languageclient_1.RequestType("sts/javaSuperTypes");
    client.onRequest(javaSuperTypes, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.hierarchy.supertypes", params); }));
    const javaCodeCompletion = new vscode_languageclient_1.RequestType('sts/javaCodeComplete');
    client.onRequest(javaCodeCompletion, (params) => __awaiter(this, void 0, void 0, function* () { return yield VSCode.commands.executeCommand("java.execute.workspaceCommand", "sts.java.code.completions", params); }));
}
exports.registerJavaDataService = registerJavaDataService;
//# sourceMappingURL=java-data.js.map