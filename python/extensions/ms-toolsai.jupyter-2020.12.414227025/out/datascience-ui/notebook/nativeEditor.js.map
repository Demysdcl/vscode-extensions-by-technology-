{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/native-editor/nativeEditor.less?da64","webpack:///./src/datascience-ui/react-common/constants.ts","webpack:///./src/datascience-ui/native-editor/addCellLine.tsx","webpack:///./src/datascience-ui/native-editor/redux/actions.ts","webpack:///./src/datascience-ui/native-editor/nativeCell.tsx","webpack:///./src/datascience-ui/native-editor/toolbar.tsx","webpack:///./src/datascience-ui/native-editor/nativeEditor.tsx","webpack:///./src/datascience-ui/native-editor/redux/reducers/effects.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/execution.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/movement.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/creation.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/index.ts","webpack:///./src/datascience-ui/native-editor/index.tsx","webpack:///./src/datascience-ui/native-editor/redux/store.ts","webpack:///external \"log4js\"","webpack:///./src/datascience-ui/native-editor/nativeEditor.less"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","__esModule","undefined","default","headers","common","Accept","adapter","transformRequest","transformResponse","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","content","options","transform","locals","getOSType","navigator","platform","startsWith","OSX","Windows","userAgent","indexOf","Linux","Unknown","props","render","className","this","tooltip","plus","includePlus","baseTheme","class","image","InsertBelow","disabled","isNotebookTrusted","innerFilter","role","title","onClick","click","createIncomingActionWithPayload","payload","messageDirection","createIncomingAction","CssConstants","actionCreators","addCell","ADD_AND_FOCUS_NEW_CELL","newCellId","insertAboveFirst","INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL","insertAbove","cellId","INSERT_ABOVE_AND_FOCUS_NEW_CELL","insertBelow","INSERT_BELOW_AND_FOCUS_NEW_CELL","executeCell","moveOp","EXECUTE_CELL_AND_ADVANCE","focusCell","cursorPos","Current","FOCUS_CELL","unfocusCell","code","UNFOCUS_CELL","selectCell","SELECT_CELL","executeAllCells","EXECUTE_ALL_CELLS","executeAbove","EXECUTE_ABOVE","executeCellAndBelow","EXECUTE_CELL_AND_BELOW","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","setVariableExplorerHeight","containerHeight","gridHeight","SET_VARIABLE_EXPLORER_HEIGHT","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","clearAllOutputs","ClearAllOutputs","export","EXPORT","exportAs","EXPORT_NOTEBOOK_AS","save","SAVE","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","sendCommand","command","SEND_COMMAND","moveCellUp","MOVE_CELL_UP","moveCellDown","MOVE_CELL_DOWN","changeCellType","CHANGE_CELL_TYPE","toggleLineNumbers","TOGGLE_LINE_NUMBERS","toggleOutput","TOGGLE_OUTPUT","deleteCell","DELETE_CELL","undo","Undo","redo","Redo","arrowUp","ARROW_UP","arrowDown","ARROW_DOWN","editCell","EDIT_CELL","version","versionId","modelId","model","id","forward","reverse","getValue","linkClick","href","LINK_CLICK","showPlot","imageHtml","ShowPlot","editorLoaded","EDITOR_LOADED","codeCreated","CODE_CREATED","loadedAllCells","LOADED_ALL_CELLS","editorUnmounted","UNMOUNT","selectKernel","SelectKernel","selectServer","SELECT_SERVER","launchNotebookTrustPrompt","LAUNCH_NOTEBOOK_TRUST_PROMPT","openSettings","setting","OPEN_SETTINGS","getVariableData","newExecutionCount","refreshCount","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","widgetFailed","ex","IPYWIDGET_RENDER_FAILURE","runByLine","RUN_BY_LINE","continue","CONTINUE","step","STEP","runExternalCommand","buttonId","cell","ExecuteExternalCommand","CellOutputWrapper","CellOutputWrapperClass","ImageButtonClass","prop","inputRef","wrapperRef","getCell","cellVM","isCodeCell","cell_type","isMarkdownCell","isSelected","selected","isFocused","focused","onMouseClick","ev","nativeEvent","elem","allowClickPropagation","stopPropagation","lastKeyPressed","onMouseDoubleClick","shouldRenderCodeEditor","inputBlockShow","editable","shouldRenderMarkdownEditor","isShowingMarkdownEditor","EditCellId","hasOutput","state","finished","executing","getCodeCell","keyDownInput","shiftKey","ctrlKey","altKey","isCellNavigationKeyboardEvent","isFocusedWhenNotSuggesting","editorInfo","isSuggesting","isFirstLine","arrowUpFromCell","isLastLine","arrowDownFromCell","metaKey","escapeCell","preventDefault","ChangeToCode","ChangeToMarkdown","ToggleLineNumbers","ToggleOutput","shiftEnterCell","ctrlEnterCell","altEnterCell","enterCell","DeleteCell","InsertAbove","useCustomEditorApi","current","focus","Unfocus","getCurrentCode","ArrowUp","ArrowDown","runAndMove","RunAndMove","runAndAdd","RunAndAdd","submitCell","Run","addNewCell","AddToEnd","addNewCellBelow","renderNavbar","addButtonRender","lastCell","MoveCellUp","firstCell","Up","MoveCellDown","Down","renderAddDivider","checkOutput","shouldRenderOutput","renderMiddleToolbar","runCell","switchTooltip","otherCellType","otherCellTypeCommand","otherCellImage","SwitchToMarkdown","SwitchToCode","toolbarClassName","runningByLine","hidden","busy","RunByLine","Interrupt","supportsRunByLine","onMouseDown","Delete","renderExternalButtons","renderControls","init","execution_count","toString","isBusy","count","visible","renderInput","shouldRenderInput","editorOptions","glyphMargin","history","codeTheme","onCodeChange","onCodeCreated","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","onCodeFocused","unfocused","onCodeUnfocused","keyDown","showLineNumbers","font","disableUndoStack","codeVersion","focusPending","language","_code","_file","renderOutput","themeMatplotlibPlots","toolbar","expandImage","maxTextSize","enableScroll","onOuterKeyDown","focusInOutput","renderCollapseBar","input","classes","Array","isArray","outputs","uri","messages","renderNormalCell","componentDidUpdate","prevProps","giveFocus","shouldComponentUpdate","nextProps","getUnknownMimeTypeFormatString","contains","activeElement","scrollIntoView","behavior","block","inline","cellOuterClass","cellWrapperClass","tabIndex","onKeyDown","onDoubleClick","closest","hideOutput","getContents","source","buttons","externalButtons","forEach","button","index","running","statusToEnable","includes","codicon","Sync","Cancel","focusedElement","selectedInfo","selectionFocusedInfo","variableExplorerTooltip","variablesVisible","canRunAbove","selectedCellIndex","canRunBelow","cellCount","selectedCellId","canRestartAndInterruptKernel","kernel","jupyterServerStatus","NotStarted","RunAll","RunAbove","RunBelow","Restart","ClearAllOutput","ToggleVariableExplorer","VariableExplorer","Save","dirty","SaveAs","ExportToPython","SelectServer","shouldShowTrustMessage","ToolbarComponent","main","cellVMs","variables","variableState","ConnectedNativeCell","renderCount","waitingForLoadRender","mainPanelToolbarRef","getContentProps","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","scrollBeyondLastLine","settings","extraSettings","editor","getVariableProps","toolbarHeight","offsetHeight","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","currentExecutionCount","mainKeyDown","focusedCellId","debuggingCell","find","cvm","Break","focusedCell","firstLine","lastLine","otherCellRunningByLine","maxOutputSize","enableScrollingForCellOutputs","allowUndo","undoStack","hasPythonExtension","_div","componentDidMount","addEventListener","forceUpdate","componentWillUnmount","removeEventListener","loaded","requestAnimationFrame","dynamicFont","fontFamily","family","progressBar","addCellLine","style","rootCss","buildSettingsCss","renderToolbarPanel","renderVariablePanel","renderContentPanel","variableProps","monacoReady","contentProps","Effects","arg","prevState","findIndex","selectionInfo","newVMs","newCell","asCellViewModel","deselectCell","removeFocusIndex","focusedCellIndex","addFocusIndex","shouldFocusCell","addIndex","someOtherCellWasFocusedAndSelected","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","newFontSize","theme","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","lineDecorationsWidth","cloneDeep","Execution","executeRange","cellIds","originalArg","cellIdsToExecute","orig","clonedCell","ReExecuteCells","executeResult","map","cellVm","executeCellAndAdvance","EXECUTE_CELL","INSERT_BELOW","executeSelectedCell","newList","postModelClearOutputs","newType","newNotebookCell","cells","redoStack","pushStack","continueExec","cv","Continue","Step","expectedExecutionCount","newVM","handleBreakState","currentStack","frames","handleContinue","startDebugging","stopDebugging","Movement","swapCells","first","firstCellId","second","secondCellId","temp","postModelSwap","Bottom","Top","Creation","prepareCellVM","hasBeenRun","newText","inputBlockOpen","vm","position","postModelInsert","insertExistingAbove","insertNewAbove","updateCell","updateOrAdd","deleteAllCells","inputBlockText","inputBlockCollapseNeeded","scrollCount","Design","postModelRemoveAll","applyCellEdit","changes","before","rangeOffset","after","rangeLength","text","postModelRemove","previousSelection","filter","nextOrPrev","loadAllCells","vms","loadTotal","addAndFocusCell","ADD_NEW_CELL","insertAboveAndFocusCell","INSERT_ABOVE","insertBelowAndFocusCell","insertAboveFirstAndFocusCell","INSERT_ABOVE_FIRST","startCell","finishCell","unmount","handleUpdate","disabledQueueArg","queueAction","kind","oldCells","cellBelow","handleUndoModel","codeCellAboveId","newCells","handleRedoModel","reducerMap","exportCells","showExportAsMenu","selectJupyterURI","started","LOAD_IPYWIDGET_CLASS_SUCCESS","handleLoadIPyWidgetClassSuccess","LOAD_IPYWIDGET_CLASS_FAILURE","handleLoadIPyWidgetClassFailure","IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED","notifyAboutUnsupportedWidgetVersions","StartCell","FinishCell","UpdateCellWithExecutionResults","NotebookDirty","notebookDirty","NotebookClean","notebookClean","LoadAllCells","TrustNotebookComplete","trustNotebook","NotebookRunAllCells","NotebookRunSelectedCell","NotebookAddCellBelow","DoSave","DeleteAllCells","GetAllCells","getAllCells","GetCellCode","getCellCode","GetAllCellCode","getAllCellCode","StartProgress","startProgress","StopProgress","stopProgress","UpdateSettings","RestartKernel","handleRestarted","GetCssResponse","handleCss","MonacoReady","GetMonacoThemeResponse","monacoThemeChange","UpdateModel","UpdateKernel","updateStatus","LocInit","handleLocInit","UpdateDisplayData","handleUpdateDisplayData","ShowBreak","ShowContinue","StartDebugging","StopDebugging","UpdateExternalCellButtons","handleWebviewButtons","executeExternalCommand","postOffice","inTestMode","acquireVsCodeApi","ConnectedNativeEditor","store","widgetContainerId","getElementById","log4js"],"mappings":"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","file":"nativeEditor.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"nativeEditor\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { OSType } from '../../client/common/utils/platform';\r\n\r\n// Javascript keyCodes\r\nexport const KeyCodes = {\r\n    LeftArrow: 37,\r\n    UpArrow: 38,\r\n    RightArrow: 39,\r\n    DownArrow: 40,\r\n    PageUp: 33,\r\n    PageDown: 34,\r\n    End: 35,\r\n    Home: 36\r\n};\r\n\r\nexport function getOSType() {\r\n    if (window.navigator.platform.startsWith('Mac')) {\r\n        return OSType.OSX;\r\n    } else if (window.navigator.platform.startsWith('Win')) {\r\n        return OSType.Windows;\r\n    } else if (window.navigator.userAgent.indexOf('Linux') > 0) {\r\n        return OSType.Linux;\r\n    } else {\r\n        return OSType.Unknown;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n'use strict';\r\nimport * as React from 'react';\r\nimport { Image, ImageName } from '../react-common/image';\r\nimport { getLocString } from '../react-common/locReactSide';\r\n\r\ninterface IAddCellLineProps {\r\n    baseTheme: string;\r\n    includePlus: boolean;\r\n    className: string;\r\n    isNotebookTrusted: boolean;\r\n    click(): void;\r\n}\r\n\r\nexport class AddCellLine extends React.Component<IAddCellLineProps> {\r\n    constructor(props: IAddCellLineProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const className = `add-cell-line ${this.props.className}`;\r\n        const tooltip = getLocString('DataScience.insertBelow', 'Insert cell below');\r\n        const plus = this.props.includePlus ? (\r\n            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\r\n        ) : null;\r\n        const disabled = !this.props.isNotebookTrusted;\r\n        const innerFilter = disabled ? 'image-button-inner-disabled-filter' : '';\r\n        return (\r\n            <div className={className}>\r\n                <button\r\n                    role=\"button\"\r\n                    aria-pressed=\"false\"\r\n                    title={tooltip}\r\n                    disabled={disabled}\r\n                    aria-label={tooltip}\r\n                    className=\"add-cell-line-button\"\r\n                    onClick={this.props.click}\r\n                >\r\n                    <span className={innerFilter}>\r\n                        {plus}\r\n                        <span className=\"add-cell-line-divider\" />\r\n                    </span>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport * as uuid from 'uuid/v4';\r\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../../client/datascience/constants';\r\nimport {\r\n    IInteractiveWindowMapping,\r\n    InteractiveWindowMessages\r\n} from '../../../client/datascience/interactive-common/interactiveWindowTypes';\r\nimport {\r\n    ICell,\r\n    IExternalCommandFromWebview,\r\n    IJupyterVariable,\r\n    IJupyterVariablesRequest\r\n} from '../../../client/datascience/types';\r\nimport { CursorPos } from '../../interactive-common/mainState';\r\nimport {\r\n    CommonAction,\r\n    CommonActionType,\r\n    CommonActionTypeMapping,\r\n    ICellAction,\r\n    ICellAndCursorAction,\r\n    ICodeAction,\r\n    ICodeCreatedAction,\r\n    IEditCellAction,\r\n    ILinkClickAction,\r\n    IOpenSettingsAction,\r\n    ISendCommandAction,\r\n    IShowDataViewerAction,\r\n    IVariableExplorerHeight\r\n} from '../../interactive-common/redux/reducers/types';\r\nimport { IMonacoModelContentChangeEvent } from '../../react-common/monacoHelpers';\r\n\r\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\r\nfunction createIncomingActionWithPayload<\r\n    M extends IInteractiveWindowMapping & CommonActionTypeMapping,\r\n    K extends keyof M\r\n>(type: K, data: M[K]): CommonAction<M[K]> {\r\n    // tslint:disable-next-line: no-any\r\n    return { type, payload: { data, messageDirection: 'incoming' } as any } as any;\r\n}\r\n// This function isn't made common and not exported, to ensure it isn't used elsewhere.\r\nfunction createIncomingAction(type: CommonActionType | InteractiveWindowMessages): CommonAction {\r\n    return { type, payload: { messageDirection: 'incoming', data: undefined } };\r\n}\r\n\r\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\r\nexport const actionCreators = {\r\n    addCell: () => createIncomingActionWithPayload(CommonActionType.ADD_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\r\n    insertAboveFirst: () =>\r\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL, { newCellId: uuid() }),\r\n    insertAbove: (cellId: string | undefined) =>\r\n        createIncomingActionWithPayload(CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL, {\r\n            cellId,\r\n            newCellId: uuid()\r\n        }),\r\n    insertBelow: (cellId: string | undefined) =>\r\n        createIncomingActionWithPayload(CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL, {\r\n            cellId,\r\n            newCellId: uuid()\r\n        }),\r\n    executeCell: (cellId: string, moveOp: 'add' | 'select' | 'none') =>\r\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_ADVANCE, { cellId, moveOp }),\r\n    focusCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.FOCUS_CELL, { cellId, cursorPos }),\r\n    unfocusCell: (cellId: string, code: string) =>\r\n        createIncomingActionWithPayload(CommonActionType.UNFOCUS_CELL, { cellId, code }),\r\n    selectCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.SELECT_CELL, { cellId, cursorPos }),\r\n    executeAllCells: (): CommonAction => createIncomingAction(CommonActionType.EXECUTE_ALL_CELLS),\r\n    executeAbove: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_ABOVE, { cellId }),\r\n    executeCellAndBelow: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.EXECUTE_CELL_AND_BELOW, { cellId }),\r\n    toggleVariableExplorer: (): CommonAction => createIncomingAction(CommonActionType.TOGGLE_VARIABLE_EXPLORER),\r\n    setVariableExplorerHeight: (containerHeight: number, gridHeight: number): CommonAction<IVariableExplorerHeight> =>\r\n        createIncomingActionWithPayload(CommonActionType.SET_VARIABLE_EXPLORER_HEIGHT, { containerHeight, gridHeight }),\r\n    restartKernel: (): CommonAction => createIncomingAction(CommonActionType.RESTART_KERNEL),\r\n    interruptKernel: (): CommonAction => createIncomingAction(CommonActionType.INTERRUPT_KERNEL),\r\n    clearAllOutputs: (): CommonAction => createIncomingAction(InteractiveWindowMessages.ClearAllOutputs),\r\n    export: (): CommonAction => createIncomingAction(CommonActionType.EXPORT),\r\n    exportAs: (): CommonAction => createIncomingAction(CommonActionType.EXPORT_NOTEBOOK_AS),\r\n    save: (): CommonAction => createIncomingAction(CommonActionType.SAVE),\r\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.SHOW_DATA_VIEWER, { variable, columnSize }),\r\n    sendCommand: (\r\n        command: NativeKeyboardCommandTelemetry | NativeMouseCommandTelemetry\r\n    ): CommonAction<ISendCommandAction> => createIncomingActionWithPayload(CommonActionType.SEND_COMMAND, { command }),\r\n    moveCellUp: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_UP, { cellId }),\r\n    moveCellDown: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.MOVE_CELL_DOWN, { cellId }),\r\n    changeCellType: (cellId: string) => createIncomingActionWithPayload(CommonActionType.CHANGE_CELL_TYPE, { cellId }),\r\n    toggleLineNumbers: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_LINE_NUMBERS, { cellId }),\r\n    toggleOutput: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.TOGGLE_OUTPUT, { cellId }),\r\n    deleteCell: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.DELETE_CELL, { cellId }),\r\n    undo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Undo),\r\n    redo: (): CommonAction => createIncomingAction(InteractiveWindowMessages.Redo),\r\n    arrowUp: (cellId: string, code: string): CommonAction<ICodeAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.ARROW_UP, { cellId, code }),\r\n    arrowDown: (cellId: string, code: string): CommonAction<ICodeAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.ARROW_DOWN, { cellId, code }),\r\n    editCell: (cellId: string, e: IMonacoModelContentChangeEvent): CommonAction<IEditCellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.EDIT_CELL, {\r\n            cellId,\r\n            version: e.versionId,\r\n            modelId: e.model.id,\r\n            forward: e.forward,\r\n            reverse: e.reverse,\r\n            id: cellId,\r\n            code: e.model.getValue()\r\n        }),\r\n    linkClick: (href: string): CommonAction<ILinkClickAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.LINK_CLICK, { href }),\r\n    showPlot: (imageHtml: string) => createIncomingActionWithPayload(InteractiveWindowMessages.ShowPlot, imageHtml),\r\n    editorLoaded: (): CommonAction => createIncomingAction(CommonActionType.EDITOR_LOADED),\r\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.CODE_CREATED, { cellId, modelId }),\r\n    loadedAllCells: (): CommonAction => createIncomingAction(CommonActionType.LOADED_ALL_CELLS),\r\n    editorUnmounted: (): CommonAction => createIncomingAction(CommonActionType.UNMOUNT),\r\n    selectKernel: (): CommonAction => createIncomingAction(InteractiveWindowMessages.SelectKernel),\r\n    selectServer: (): CommonAction => createIncomingAction(CommonActionType.SELECT_SERVER),\r\n    launchNotebookTrustPrompt: (): CommonAction => createIncomingAction(CommonActionType.LAUNCH_NOTEBOOK_TRUST_PROMPT),\r\n    openSettings: (setting?: string): CommonAction<IOpenSettingsAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.OPEN_SETTINGS, { setting }),\r\n    getVariableData: (\r\n        newExecutionCount: number,\r\n        refreshCount: number,\r\n        startIndex: number = 0,\r\n        pageSize: number = 100\r\n    ): CommonAction<IJupyterVariablesRequest> =>\r\n        createIncomingActionWithPayload(CommonActionType.GET_VARIABLE_DATA, {\r\n            executionCount: newExecutionCount,\r\n            sortColumn: 'name',\r\n            sortAscending: true,\r\n            startIndex,\r\n            pageSize,\r\n            refreshCount\r\n        }),\r\n    widgetFailed: (ex: Error): CommonAction<Error> =>\r\n        createIncomingActionWithPayload(CommonActionType.IPYWIDGET_RENDER_FAILURE, ex),\r\n    runByLine: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.RUN_BY_LINE, { cellId }),\r\n    continue: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.CONTINUE, { cellId }),\r\n    step: (cellId: string): CommonAction<ICellAction> =>\r\n        createIncomingActionWithPayload(CommonActionType.STEP, { cellId }),\r\n    runExternalCommand: (buttonId: string, cell: ICell): CommonAction<IExternalCommandFromWebview> =>\r\n        createIncomingActionWithPayload(InteractiveWindowMessages.ExecuteExternalCommand, { buttonId, cell })\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport '../../client/common/extensions';\r\n\r\nimport { nbformat } from '@jupyterlab/coreutils';\r\nimport * as fastDeepEqual from 'fast-deep-equal';\r\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { OSType } from '../../client/common/utils/platform';\r\nimport {\r\n    Identifiers,\r\n    NativeKeyboardCommandTelemetry,\r\n    NativeMouseCommandTelemetry\r\n} from '../../client/datascience/constants';\r\nimport { CellState, IExternalWebviewCellButton } from '../../client/datascience/types';\r\nimport { concatMultilineString } from '../common';\r\nimport { CellInput } from '../interactive-common/cellInput';\r\nimport { CellOutput } from '../interactive-common/cellOutput';\r\nimport { ExecutionCount } from '../interactive-common/executionCount';\r\nimport { InformationMessages } from '../interactive-common/informationMessages';\r\nimport { activeDebugState, CursorPos, DebugState, ICellViewModel, IFont } from '../interactive-common/mainState';\r\nimport { getOSType } from '../react-common/constants';\r\nimport { IKeyboardEvent } from '../react-common/event';\r\nimport { Image, ImageName } from '../react-common/image';\r\nimport { ImageButton } from '../react-common/imageButton';\r\nimport { getLocString } from '../react-common/locReactSide';\r\nimport { IMonacoModelContentChangeEvent } from '../react-common/monacoHelpers';\r\nimport { AddCellLine } from './addCellLine';\r\nimport { actionCreators } from './redux/actions';\r\n\r\nnamespace CssConstants {\r\n    export const CellOutputWrapper = 'cell-output-wrapper';\r\n    export const CellOutputWrapperClass = `.${CellOutputWrapper}`;\r\n    export const ImageButtonClass = '.image-button';\r\n}\r\n\r\ninterface INativeCellBaseProps {\r\n    role?: string;\r\n    cellVM: ICellViewModel;\r\n    language: string;\r\n\r\n    baseTheme: string;\r\n    codeTheme: string;\r\n    testMode?: boolean;\r\n    maxTextSize?: number;\r\n    enableScroll?: boolean;\r\n    monacoTheme: string | undefined;\r\n    lastCell: boolean;\r\n    firstCell: boolean;\r\n    font: IFont;\r\n    allowUndo: boolean;\r\n    editorOptions: monacoEditor.editor.IEditorOptions;\r\n    themeMatplotlibPlots: boolean | undefined;\r\n    focusPending: number;\r\n    busy: boolean;\r\n    useCustomEditorApi: boolean;\r\n    runningByLine: DebugState;\r\n    supportsRunByLine: boolean;\r\n    isNotebookTrusted: boolean;\r\n    externalButtons: IExternalWebviewCellButton[];\r\n}\r\n\r\ntype INativeCellProps = INativeCellBaseProps & typeof actionCreators;\r\n\r\n// tslint:disable: react-this-binding-issue\r\nexport class NativeCell extends React.Component<INativeCellProps> {\r\n    private inputRef: React.RefObject<CellInput> = React.createRef<CellInput>();\r\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\r\n    private lastKeyPressed: string | undefined;\r\n\r\n    constructor(prop: INativeCellProps) {\r\n        super(prop);\r\n    }\r\n\r\n    public render() {\r\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\r\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\r\n        } else {\r\n            return this.renderNormalCell();\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: INativeCellProps) {\r\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\r\n            this.giveFocus();\r\n        }\r\n\r\n        // Anytime we update, reset the key. This object will be reused for different cell ids\r\n        this.lastKeyPressed = undefined;\r\n    }\r\n\r\n    public shouldComponentUpdate(nextProps: INativeCellProps): boolean {\r\n        return !fastDeepEqual(this.props, nextProps);\r\n    }\r\n\r\n    // Public for testing\r\n    public getUnknownMimeTypeFormatString() {\r\n        return getLocString('DataScience.unknownMimeTypeFormat', 'Unknown Mime Type');\r\n    }\r\n\r\n    private giveFocus() {\r\n        if (this.wrapperRef && this.wrapperRef.current) {\r\n            // Give focus to the cell if not already owning focus\r\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\r\n                this.wrapperRef.current.focus();\r\n            }\r\n\r\n            // Scroll into view (since we have focus). However this function\r\n            // is not supported on enzyme\r\n            // tslint:disable-next-line: no-any\r\n            if ((this.wrapperRef.current as any).scrollIntoView) {\r\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCell = () => {\r\n        return this.props.cellVM.cell;\r\n    };\r\n\r\n    private isCodeCell = () => {\r\n        return this.props.cellVM.cell.data.cell_type === 'code';\r\n    };\r\n\r\n    private isMarkdownCell = () => {\r\n        return this.props.cellVM.cell.data.cell_type === 'markdown';\r\n    };\r\n\r\n    private isSelected = () => {\r\n        return this.props.cellVM.selected;\r\n    };\r\n\r\n    private isNotebookTrusted = () => {\r\n        return this.props.isNotebookTrusted;\r\n    };\r\n\r\n    private isFocused = () => {\r\n        return this.props.cellVM.focused;\r\n    };\r\n\r\n    private renderNormalCell() {\r\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\r\n        let cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\r\n        if (this.isSelected() && !this.isFocused()) {\r\n            cellWrapperClass += ' cell-wrapper-selected';\r\n        }\r\n        if (this.isFocused()) {\r\n            cellWrapperClass += ' cell-wrapper-focused';\r\n        }\r\n\r\n        // Content changes based on if a markdown cell or not.\r\n        const content =\r\n            this.isMarkdownCell() && !this.isShowingMarkdownEditor() ? (\r\n                <div className=\"cell-result-container\">\r\n                    <div className=\"cell-row-container\">\r\n                        {this.renderCollapseBar(false)}\r\n                        {this.renderOutput()}\r\n                    </div>\r\n                    {this.renderAddDivider(false)}\r\n                </div>\r\n            ) : (\r\n                <div className=\"cell-result-container\">\r\n                    <div className=\"cell-row-container\">\r\n                        {this.renderCollapseBar(true)}\r\n                        {this.renderControls()}\r\n                        {this.renderInput()}\r\n                    </div>\r\n                    {this.renderAddDivider(true)}\r\n                    <div className=\"cell-row-container\">\r\n                        {this.renderCollapseBar(false)}\r\n                        {this.renderOutput()}\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        return (\r\n            <div\r\n                className={cellWrapperClass}\r\n                role={this.props.role}\r\n                ref={this.wrapperRef}\r\n                tabIndex={0}\r\n                onKeyDown={this.onOuterKeyDown}\r\n                onClick={this.onMouseClick}\r\n                onDoubleClick={this.onMouseDoubleClick}\r\n            >\r\n                <div className={cellOuterClass}>\r\n                    {this.renderNavbar()}\r\n                    <div className=\"content-div\">{content}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private allowClickPropagation(elem: HTMLElement): boolean {\r\n        if (this.isMarkdownCell()) {\r\n            return true;\r\n        }\r\n        if (!elem.closest(CssConstants.ImageButtonClass) && !elem.closest(CssConstants.CellOutputWrapperClass)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\r\n        if (ev.nativeEvent.target) {\r\n            const elem = ev.nativeEvent.target as HTMLElement;\r\n            if (this.allowClickPropagation(elem)) {\r\n                // Not a click on an button in a toolbar or in output, select the cell.\r\n                ev.stopPropagation();\r\n                this.lastKeyPressed = undefined;\r\n                this.props.selectCell(this.cellId);\r\n            }\r\n        }\r\n    };\r\n\r\n    private onMouseDoubleClick = (ev: React.MouseEvent<HTMLDivElement>) => {\r\n        const elem = ev.nativeEvent.target as HTMLElement;\r\n        if (this.allowClickPropagation(elem)) {\r\n            // When we receive double click, propagate upwards. Might change our state\r\n            ev.stopPropagation();\r\n            this.props.focusCell(this.cellId, CursorPos.Current);\r\n        }\r\n    };\r\n\r\n    private shouldRenderCodeEditor = (): boolean => {\r\n        return this.isCodeCell() && (this.props.cellVM.inputBlockShow || this.props.cellVM.editable);\r\n    };\r\n\r\n    private shouldRenderMarkdownEditor = (): boolean => {\r\n        return (\r\n            this.isMarkdownCell() &&\r\n            (this.isShowingMarkdownEditor() || this.props.cellVM.cell.id === Identifiers.EditCellId)\r\n        );\r\n    };\r\n\r\n    private isShowingMarkdownEditor = (): boolean => {\r\n        return this.isMarkdownCell() && (this.props.cellVM.focused || !this.isNotebookTrusted());\r\n    };\r\n\r\n    private shouldRenderInput(): boolean {\r\n        return this.shouldRenderCodeEditor() || this.shouldRenderMarkdownEditor();\r\n    }\r\n\r\n    private hasOutput = () => {\r\n        return (\r\n            this.getCell().state === CellState.finished ||\r\n            this.getCell().state === CellState.error ||\r\n            this.getCell().state === CellState.executing\r\n        );\r\n    };\r\n\r\n    private getCodeCell = () => {\r\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\r\n    };\r\n\r\n    private shouldRenderOutput(): boolean {\r\n        if (!this.isNotebookTrusted()) {\r\n            return false;\r\n        }\r\n        if (this.isCodeCell()) {\r\n            const cell = this.getCodeCell();\r\n            return (\r\n                this.hasOutput() &&\r\n                cell.outputs &&\r\n                !this.props.cellVM.hideOutput &&\r\n                Array.isArray(cell.outputs) &&\r\n                cell.outputs.length !== 0\r\n            );\r\n        } else if (this.isMarkdownCell()) {\r\n            return !this.isShowingMarkdownEditor();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\r\n    private keyDownInput = (cellId: string, e: IKeyboardEvent) => {\r\n        if (!this.isNotebookTrusted() && !isCellNavigationKeyboardEvent(e)) {\r\n            return;\r\n        }\r\n        const isFocusedWhenNotSuggesting = this.isFocused() && e.editorInfo && !e.editorInfo.isSuggesting;\r\n        switch (e.code) {\r\n            case 'ArrowUp':\r\n            case 'k':\r\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isFirstLine && !e.shiftKey) || !this.isFocused()) {\r\n                    this.arrowUpFromCell(e);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n            case 'j':\r\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isLastLine && !e.shiftKey) || !this.isFocused()) {\r\n                    this.arrowDownFromCell(e);\r\n                }\r\n                break;\r\n            case 's':\r\n                if ((e.ctrlKey && getOSType() !== OSType.OSX) || (e.metaKey && getOSType() === OSType.OSX)) {\r\n                    // This is save, save our cells\r\n                    this.props.save();\r\n                }\r\n                break;\r\n\r\n            case 'Escape':\r\n                if (isFocusedWhenNotSuggesting) {\r\n                    this.escapeCell(e);\r\n                }\r\n                break;\r\n            case 'y':\r\n                if (!this.isFocused() && this.isSelected() && this.isMarkdownCell()) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    this.props.changeCellType(cellId);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToCode);\r\n                }\r\n                break;\r\n            case 'm':\r\n                if (!this.isFocused() && this.isSelected() && this.isCodeCell()) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    this.props.changeCellType(cellId);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ChangeToMarkdown);\r\n                }\r\n                break;\r\n            case 'l':\r\n                if (!this.isFocused() && this.isSelected()) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    this.props.toggleLineNumbers(cellId);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleLineNumbers);\r\n                }\r\n                break;\r\n            case 'o':\r\n                if (!this.isFocused() && this.isSelected()) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    this.props.toggleOutput(cellId);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.ToggleOutput);\r\n                }\r\n                break;\r\n            case 'NumpadEnter':\r\n            case 'Enter':\r\n                if (e.shiftKey) {\r\n                    this.shiftEnterCell(e);\r\n                } else if (e.ctrlKey) {\r\n                    this.ctrlEnterCell(e);\r\n                } else if (e.altKey) {\r\n                    this.altEnterCell(e);\r\n                } else {\r\n                    this.enterCell(e);\r\n                }\r\n                break;\r\n            case 'd':\r\n                if (this.lastKeyPressed === 'd' && !this.isFocused() && this.isSelected()) {\r\n                    e.stopPropagation();\r\n                    this.lastKeyPressed = undefined; // Reset it so we don't keep deleting\r\n                    this.props.deleteCell(cellId);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.DeleteCell);\r\n                }\r\n                break;\r\n            case 'a':\r\n                if (!this.isFocused()) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    setTimeout(() => this.props.insertAbove(cellId), 1);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertAbove);\r\n                }\r\n                break;\r\n            case 'b':\r\n                if (!this.isFocused()) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    setTimeout(() => this.props.insertBelow(cellId), 1);\r\n                    this.props.sendCommand(NativeKeyboardCommandTelemetry.InsertBelow);\r\n                }\r\n                break;\r\n            case 'z':\r\n            case 'Z':\r\n                if (!this.isFocused() && !this.props.useCustomEditorApi) {\r\n                    if (e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {\r\n                        e.stopPropagation();\r\n                        this.props.redo();\r\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\r\n                    } else if (!e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {\r\n                        e.stopPropagation();\r\n                        this.props.undo();\r\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.lastKeyPressed = e.code;\r\n    };\r\n\r\n    private get cellId(): string {\r\n        return this.props.cellVM.cell.id;\r\n    }\r\n\r\n    private escapeCell = (e: IKeyboardEvent) => {\r\n        // Unfocus the current cell by giving focus to the cell itself\r\n        if (this.wrapperRef && this.wrapperRef.current && this.isFocused()) {\r\n            e.stopPropagation();\r\n            this.wrapperRef.current.focus();\r\n            this.props.sendCommand(NativeKeyboardCommandTelemetry.Unfocus);\r\n        }\r\n    };\r\n\r\n    private arrowUpFromCell = (e: IKeyboardEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.props.arrowUp(this.cellId, this.getCurrentCode());\r\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowUp);\r\n    };\r\n\r\n    private arrowDownFromCell = (e: IKeyboardEvent) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.props.arrowDown(this.cellId, this.getCurrentCode());\r\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.ArrowDown);\r\n    };\r\n\r\n    private enterCell = (e: IKeyboardEvent) => {\r\n        // If focused, then ignore this call. It should go to the focused cell instead.\r\n        if (!this.isFocused() && !e.editorInfo && this.wrapperRef && this.wrapperRef && this.isSelected()) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.props.focusCell(this.cellId, CursorPos.Current);\r\n        }\r\n    };\r\n\r\n    private shiftEnterCell = (e: IKeyboardEvent) => {\r\n        // Prevent shift enter from add an enter\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        // Submit and move to the next.\r\n        this.runAndMove();\r\n\r\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndMove);\r\n    };\r\n\r\n    private altEnterCell = (e: IKeyboardEvent) => {\r\n        // Prevent shift enter from add an enter\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        // Submit this cell\r\n        this.runAndAdd();\r\n\r\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.RunAndAdd);\r\n    };\r\n\r\n    private runAndMove() {\r\n        // Submit this cell\r\n        this.submitCell(this.props.lastCell ? 'add' : 'select');\r\n    }\r\n\r\n    private runAndAdd() {\r\n        // Submit this cell\r\n        this.submitCell('add');\r\n    }\r\n\r\n    private ctrlEnterCell = (e: IKeyboardEvent) => {\r\n        // Prevent shift enter from add an enter\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        // Escape the current cell if it is markdown to make it render\r\n        if (this.isMarkdownCell()) {\r\n            this.escapeCell(e);\r\n        }\r\n\r\n        // Submit this cell\r\n        this.submitCell('none');\r\n        this.props.sendCommand(NativeKeyboardCommandTelemetry.Run);\r\n    };\r\n\r\n    private submitCell = (moveOp: 'add' | 'select' | 'none') => {\r\n        this.props.executeCell(this.cellId, moveOp);\r\n    };\r\n\r\n    private addNewCell = () => {\r\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\r\n        this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\r\n    };\r\n    private addNewCellBelow = () => {\r\n        setTimeout(() => this.props.insertBelow(this.cellId), 1);\r\n        this.props.sendCommand(NativeMouseCommandTelemetry.InsertBelow);\r\n    };\r\n\r\n    private renderNavbar = () => {\r\n        const moveUp = () => {\r\n            this.props.moveCellUp(this.cellId);\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellUp);\r\n        };\r\n        const moveDown = () => {\r\n            this.props.moveCellDown(this.cellId);\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.MoveCellDown);\r\n        };\r\n        const addButtonRender = !this.props.lastCell ? (\r\n            <div className=\"navbar-add-button\">\r\n                <ImageButton\r\n                    baseTheme={this.props.baseTheme}\r\n                    onClick={this.addNewCellBelow}\r\n                    disabled={!this.props.isNotebookTrusted}\r\n                    tooltip={getLocString('DataScience.insertBelow', 'Insert cell below')}\r\n                >\r\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\r\n                </ImageButton>\r\n            </div>\r\n        ) : null;\r\n\r\n        return (\r\n            <div className=\"navbar-div\">\r\n                <div>\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onClick={moveUp}\r\n                        disabled={this.props.firstCell || !this.props.isNotebookTrusted}\r\n                        tooltip={getLocString('DataScience.moveCellUp', 'Move cell up')}\r\n                    >\r\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Up} />\r\n                    </ImageButton>\r\n                </div>\r\n                <div>\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onClick={moveDown}\r\n                        disabled={this.props.lastCell || !this.props.isNotebookTrusted}\r\n                        tooltip={getLocString('DataScience.moveCellDown', 'Move cell down')}\r\n                    >\r\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Down} />\r\n                    </ImageButton>\r\n                </div>\r\n                {addButtonRender}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private renderAddDivider = (checkOutput: boolean) => {\r\n        // Skip on the last cell\r\n        if (!this.props.lastCell) {\r\n            // Divider should only show if no output\r\n            if (!checkOutput || !this.shouldRenderOutput()) {\r\n                return (\r\n                    <AddCellLine\r\n                        className=\"add-divider\"\r\n                        baseTheme={this.props.baseTheme}\r\n                        includePlus={false}\r\n                        isNotebookTrusted={this.props.isNotebookTrusted}\r\n                        click={this.addNewCell}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    private getCurrentCode(): string {\r\n        // Input may not be open at this time. If not, then use current cell contents.\r\n        const contents = this.inputRef.current ? this.inputRef.current.getContents() : undefined;\r\n        return contents || concatMultilineString(this.props.cellVM.cell.data.source);\r\n    }\r\n\r\n    private renderMiddleToolbar = () => {\r\n        const cellId = this.props.cellVM.cell.id;\r\n        const runCell = () => {\r\n            this.runAndMove();\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.Run);\r\n        };\r\n        const deleteCell = () => {\r\n            this.props.deleteCell(cellId);\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.DeleteCell);\r\n        };\r\n        const runbyline = () => {\r\n            this.props.focusCell(cellId);\r\n            this.props.runByLine(cellId);\r\n        };\r\n        const stop = () => {\r\n            this.props.interruptKernel();\r\n        };\r\n        const step = () => {\r\n            this.props.focusCell(cellId);\r\n            this.props.step(cellId);\r\n        };\r\n        const switchTooltip =\r\n            this.props.cellVM.cell.data.cell_type === 'code'\r\n                ? getLocString('DataScience.switchToMarkdown', 'Change to markdown')\r\n                : getLocString('DataScience.switchToCode', 'Change to code');\r\n        const otherCellType = this.props.cellVM.cell.data.cell_type === 'code' ? 'markdown' : 'code';\r\n        const otherCellTypeCommand =\r\n            otherCellType === 'markdown'\r\n                ? NativeMouseCommandTelemetry.ChangeToMarkdown\r\n                : NativeMouseCommandTelemetry.ChangeToCode;\r\n        const otherCellImage = otherCellType === 'markdown' ? ImageName.SwitchToMarkdown : ImageName.SwitchToCode;\r\n        const switchCellType = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            // Prevent this mouse click from stealing focus so that we\r\n            // can give focus to the cell input.\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n            this.props.changeCellType(cellId);\r\n            this.props.sendCommand(otherCellTypeCommand);\r\n        };\r\n        const toolbarClassName = this.props.cellVM.cell.data.cell_type === 'code' ? '' : 'markdown-toolbar';\r\n\r\n        if (activeDebugState(this.props.runningByLine) && !this.isMarkdownCell()) {\r\n            return (\r\n                <div className={toolbarClassName}>\r\n                    <div className=\"native-editor-celltoolbar-middle\">\r\n                        <ImageButton\r\n                            className={'image-button-empty'} // Just takes up space for now\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={runCell}\r\n                            tooltip={getLocString('DataScience.runCell', 'Run cell')}\r\n                            hidden={this.isMarkdownCell()}\r\n                            disabled={true}\r\n                        >\r\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={step}\r\n                            tooltip={getLocString('DataScience.step', 'Run next line (F10)')}\r\n                            hidden={this.isMarkdownCell()}\r\n                            disabled={this.props.busy || this.props.runningByLine === DebugState.Run}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.RunByLine}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={stop}\r\n                            tooltip={getLocString('DataScience.stopRunByLine', 'Stop')}\r\n                            hidden={this.isMarkdownCell()}\r\n                            disabled={false}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.Interrupt}\r\n                            />\r\n                        </ImageButton>\r\n                    </div>\r\n                    <div className=\"native-editor-celltoolbar-divider\" />\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className={toolbarClassName}>\r\n                <div className=\"native-editor-celltoolbar-middle\">\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onClick={runCell}\r\n                        tooltip={getLocString('DataScience.runCell', 'Run cell')}\r\n                        hidden={this.isMarkdownCell()}\r\n                        disabled={this.props.busy || !this.props.isNotebookTrusted}\r\n                    >\r\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\r\n                    </ImageButton>\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onClick={runbyline}\r\n                        tooltip={getLocString('DataScience.runByLine', 'Run by line')}\r\n                        hidden={this.isMarkdownCell() || !this.props.supportsRunByLine}\r\n                        disabled={this.props.busy || !this.props.isNotebookTrusted}\r\n                    >\r\n                        <Image\r\n                            baseTheme={this.props.baseTheme}\r\n                            class=\"image-button-image\"\r\n                            image={ImageName.RunByLine}\r\n                        />\r\n                    </ImageButton>\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onMouseDown={switchCellType}\r\n                        tooltip={switchTooltip}\r\n                        disabled={!this.props.isNotebookTrusted}\r\n                    >\r\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={otherCellImage} />\r\n                    </ImageButton>\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onClick={deleteCell}\r\n                        tooltip={getLocString('DataScience.deleteCell', 'Delete cell')}\r\n                        className=\"delete-cell-button hover-cell-button\"\r\n                        disabled={!this.props.isNotebookTrusted}\r\n                    >\r\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Delete} />\r\n                    </ImageButton>\r\n                    {this.renderExternalButtons()}\r\n                </div>\r\n                <div className=\"native-editor-celltoolbar-divider\" />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private renderExternalButtons() {\r\n        const buttons: JSX.Element[] = [];\r\n\r\n        this.props.externalButtons.forEach((button, index) => {\r\n            if (this.isCodeCell()) {\r\n                buttons.push(\r\n                    <ImageButton\r\n                        baseTheme={this.props.baseTheme}\r\n                        onClick={() => {\r\n                            button.running = true;\r\n                            this.props.runExternalCommand(button.buttonId, this.props.cellVM.cell);\r\n                        }}\r\n                        disabled={!button.statusToEnable.includes(this.props.cellVM.cell.state)}\r\n                        tooltip={button.tooltip}\r\n                        key={index}\r\n                    >\r\n                        <Image\r\n                            baseTheme={this.props.baseTheme}\r\n                            class=\"image-button-image\"\r\n                            codicon={button.running ? undefined : button.codicon}\r\n                            image={button.running ? ImageName.Sync : ImageName.Cancel}\r\n                        />\r\n                    </ImageButton>\r\n                );\r\n            }\r\n        });\r\n\r\n        return buttons;\r\n    }\r\n\r\n    private renderControls = () => {\r\n        const busy =\r\n            this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\r\n        const executionCount =\r\n            this.props.cellVM &&\r\n            this.props.cellVM.cell &&\r\n            this.props.cellVM.cell.data &&\r\n            this.props.cellVM.cell.data.execution_count\r\n                ? this.props.cellVM.cell.data.execution_count.toString()\r\n                : '-';\r\n\r\n        return (\r\n            <div className=\"controls-div\">\r\n                <ExecutionCount isBusy={busy} count={executionCount} visible={this.isCodeCell()} />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private renderInput = () => {\r\n        if (this.shouldRenderInput()) {\r\n            // Make sure the glyph margin is always there for native cells.\r\n            // We need it for debugging.\r\n            const options = {\r\n                ...this.props.editorOptions,\r\n                glyphMargin: true\r\n            };\r\n            return (\r\n                <div className=\"cell-input-wrapper\">\r\n                    {this.renderMiddleToolbar()}\r\n                    <CellInput\r\n                        cellVM={this.props.cellVM}\r\n                        editorOptions={options}\r\n                        history={undefined}\r\n                        codeTheme={this.props.codeTheme}\r\n                        onCodeChange={this.onCodeChange}\r\n                        onCodeCreated={this.onCodeCreated}\r\n                        testMode={this.props.testMode ? true : false}\r\n                        showWatermark={false}\r\n                        ref={this.inputRef}\r\n                        monacoTheme={this.props.monacoTheme}\r\n                        openLink={this.openLink}\r\n                        editorMeasureClassName={undefined}\r\n                        focused={this.onCodeFocused}\r\n                        unfocused={this.onCodeUnfocused}\r\n                        keyDown={this.keyDownInput}\r\n                        showLineNumbers={this.props.cellVM.showLineNumbers}\r\n                        font={this.props.font}\r\n                        disableUndoStack={this.props.useCustomEditorApi}\r\n                        codeVersion={this.props.cellVM.codeVersion ? this.props.cellVM.codeVersion : 1}\r\n                        focusPending={this.props.focusPending}\r\n                        language={this.props.language}\r\n                        isNotebookTrusted={this.props.isNotebookTrusted}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    private onCodeFocused = () => {\r\n        this.props.focusCell(this.cellId, CursorPos.Current);\r\n    };\r\n\r\n    private onCodeUnfocused = () => {\r\n        // Make sure to save the code from the editor into the cell\r\n        this.props.unfocusCell(this.cellId, this.getCurrentCode());\r\n    };\r\n\r\n    private onCodeChange = (e: IMonacoModelContentChangeEvent) => {\r\n        this.props.editCell(this.getCell().id, e);\r\n    };\r\n\r\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\r\n        this.props.codeCreated(cellId, modelId);\r\n    };\r\n\r\n    private renderOutput = (): JSX.Element | null => {\r\n        const themeMatplotlibPlots = this.props.themeMatplotlibPlots ? true : false;\r\n        const toolbar = this.props.cellVM.cell.data.cell_type === 'markdown' ? this.renderMiddleToolbar() : null;\r\n        if (this.shouldRenderOutput()) {\r\n            return (\r\n                <div className={CssConstants.CellOutputWrapper}>\r\n                    {toolbar}\r\n                    <CellOutput\r\n                        cellVM={this.props.cellVM}\r\n                        baseTheme={this.props.baseTheme}\r\n                        expandImage={this.props.showPlot}\r\n                        maxTextSize={this.props.maxTextSize}\r\n                        enableScroll={this.props.enableScroll}\r\n                        themeMatplotlibPlots={themeMatplotlibPlots}\r\n                        widgetFailed={this.props.widgetFailed}\r\n                        openSettings={this.props.openSettings}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    private onOuterKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n        // Handle keydown events for the entire cell when we don't have focus\r\n        if (event.key !== 'Tab' && !this.isFocused() && !this.focusInOutput()) {\r\n            this.keyDownInput(this.props.cellVM.cell.id, {\r\n                code: event.key,\r\n                shiftKey: event.shiftKey,\r\n                ctrlKey: event.ctrlKey,\r\n                metaKey: event.metaKey,\r\n                altKey: event.altKey,\r\n                target: event.target as HTMLDivElement,\r\n                stopPropagation: () => event.stopPropagation(),\r\n                preventDefault: () => event.preventDefault()\r\n            });\r\n        }\r\n    };\r\n\r\n    private focusInOutput(): boolean {\r\n        const focusedElement = document.activeElement as HTMLElement;\r\n        if (focusedElement) {\r\n            return focusedElement.closest(CssConstants.CellOutputWrapperClass) !== null;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private renderCollapseBar = (input: boolean) => {\r\n        let classes = 'collapse-bar';\r\n\r\n        if (this.isSelected() && !this.isFocused()) {\r\n            classes += ' collapse-bar-selected';\r\n        }\r\n        if (this.isFocused()) {\r\n            classes += ' collapse-bar-focused';\r\n        }\r\n\r\n        if (input) {\r\n            return <div className={classes}></div>;\r\n        }\r\n\r\n        if (this.props.cellVM.cell.data.cell_type === 'markdown') {\r\n            classes += ' collapse-bar-markdown';\r\n        } else if (\r\n            Array.isArray(this.props.cellVM.cell.data.outputs) &&\r\n            this.props.cellVM.cell.data.outputs.length !== 0\r\n        ) {\r\n            classes += ' collapse-bar-output';\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n        return <div className={classes}></div>;\r\n    };\r\n\r\n    private openLink = (uri: monacoEditor.Uri) => {\r\n        this.props.linkClick(uri.toString());\r\n    };\r\n}\r\n\r\n// Main export, return a redux connected editor\r\nexport function getConnectedNativeCell() {\r\n    return connect(null, actionCreators)(NativeCell);\r\n}\r\n\r\nfunction isCellNavigationKeyboardEvent(e: IKeyboardEvent) {\r\n    return (\r\n        ((e.code === 'Enter' || e.code === 'NumpadEnter') && !e.shiftKey && !e.ctrlKey && !e.altKey) ||\r\n        e.code === 'ArrowUp' ||\r\n        e.code === 'k' ||\r\n        e.code === 'ArrowDown' ||\r\n        e.code === 'j' ||\r\n        e.code === 'Escape'\r\n    );\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NativeMouseCommandTelemetry } from '../../client/datascience/constants';\r\nimport { IJupyterExtraSettings } from '../../client/datascience/types';\r\nimport { JupyterInfo } from '../interactive-common/jupyterInfo';\r\nimport {\r\n    getSelectedAndFocusedInfo,\r\n    IFont,\r\n    IServerState,\r\n    SelectionAndFocusedInfo,\r\n    ServerStatus\r\n} from '../interactive-common/mainState';\r\nimport { IStore } from '../interactive-common/redux/store';\r\nimport { Image, ImageName } from '../react-common/image';\r\nimport { ImageButton } from '../react-common/imageButton';\r\nimport { getLocString } from '../react-common/locReactSide';\r\nimport './nativeEditor.less';\r\nimport { actionCreators } from './redux/actions';\r\n\r\ntype INativeEditorDataProps = {\r\n    busy: boolean;\r\n    dirty: boolean;\r\n    baseTheme: string;\r\n    cellCount: number;\r\n    font: IFont;\r\n    kernel: IServerState;\r\n    selectionFocusedInfo: SelectionAndFocusedInfo;\r\n    variablesVisible: boolean;\r\n    settings?: IJupyterExtraSettings;\r\n};\r\nexport type INativeEditorToolbarProps = INativeEditorDataProps & {\r\n    sendCommand: typeof actionCreators.sendCommand;\r\n    clearAllOutputs: typeof actionCreators.clearAllOutputs;\r\n    export: typeof actionCreators.export;\r\n    exportAs: typeof actionCreators.exportAs;\r\n    addCell: typeof actionCreators.addCell;\r\n    save: typeof actionCreators.save;\r\n    executeAllCells: typeof actionCreators.executeAllCells;\r\n    toggleVariableExplorer: typeof actionCreators.toggleVariableExplorer;\r\n    setVariableExplorerHeight: typeof actionCreators.setVariableExplorerHeight;\r\n    executeAbove: typeof actionCreators.executeAbove;\r\n    executeCellAndBelow: typeof actionCreators.executeCellAndBelow;\r\n    restartKernel: typeof actionCreators.restartKernel;\r\n    interruptKernel: typeof actionCreators.interruptKernel;\r\n    selectKernel: typeof actionCreators.selectKernel;\r\n    selectServer: typeof actionCreators.selectServer;\r\n    launchNotebookTrustPrompt: typeof actionCreators.launchNotebookTrustPrompt;\r\n    isNotebookTrusted: boolean;\r\n};\r\n\r\nfunction mapStateToProps(state: IStore): INativeEditorDataProps {\r\n    return {\r\n        ...state.main,\r\n        cellCount: state.main.cellVMs.length,\r\n        selectionFocusedInfo: getSelectedAndFocusedInfo(state.main),\r\n        variablesVisible: state.variables.visible\r\n    };\r\n}\r\n\r\nexport class Toolbar extends React.PureComponent<INativeEditorToolbarProps> {\r\n    constructor(props: INativeEditorToolbarProps) {\r\n        super(props);\r\n    }\r\n\r\n    // tslint:disable: react-this-binding-issue\r\n    // tslint:disable-next-line: max-func-body-length\r\n    public render() {\r\n        const selectedInfo = this.props.selectionFocusedInfo;\r\n\r\n        const addCell = () => {\r\n            setTimeout(() => this.props.addCell(), 1);\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\r\n        };\r\n        const runAll = () => {\r\n            // Run all cells currently available.\r\n            this.props.executeAllCells();\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.RunAll);\r\n        };\r\n        const save = () => {\r\n            this.props.save();\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.Save);\r\n        };\r\n        const toggleVariableExplorer = () => {\r\n            this.props.toggleVariableExplorer();\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.ToggleVariableExplorer);\r\n        };\r\n        const variableExplorerTooltip = this.props.variablesVisible\r\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\r\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\r\n        const runAbove = () => {\r\n            if (selectedInfo.selectedCellId) {\r\n                this.props.executeAbove(selectedInfo.selectedCellId);\r\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunAbove);\r\n            }\r\n        };\r\n        const runBelow = () => {\r\n            if (selectedInfo.selectedCellId && typeof selectedInfo.selectedCellIndex === 'number') {\r\n                // tslint:disable-next-line: no-suspicious-comment\r\n                // TODO: Is the source going to be up to date during run below?\r\n                this.props.executeCellAndBelow(selectedInfo.selectedCellId);\r\n                this.props.sendCommand(NativeMouseCommandTelemetry.RunBelow);\r\n            }\r\n        };\r\n        const selectKernel = () => {\r\n            this.props.selectKernel();\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectKernel);\r\n        };\r\n        const selectServer = () => {\r\n            this.props.selectServer();\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.SelectServer);\r\n        };\r\n        const launchNotebookTrustPrompt = () => {\r\n            if (!this.props.isNotebookTrusted) {\r\n                this.props.launchNotebookTrustPrompt();\r\n            }\r\n        };\r\n        const canRunAbove = (selectedInfo.selectedCellIndex ?? -1) > 0;\r\n        const canRunBelow =\r\n            (selectedInfo.selectedCellIndex ?? -1) < this.props.cellCount - 1 &&\r\n            (selectedInfo.selectedCellId || '').length > 0;\r\n\r\n        const canRestartAndInterruptKernel = this.props.kernel.jupyterServerStatus !== ServerStatus.NotStarted;\r\n\r\n        return (\r\n            <div id=\"toolbar-panel\">\r\n                <div className=\"toolbar-menu-bar\">\r\n                    <div className=\"toolbar-menu-bar-child\">\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={runAll}\r\n                            disabled={this.props.busy || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.runAll', 'Run All Cells')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.RunAll}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={runAbove}\r\n                            disabled={!canRunAbove || this.props.busy || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.runAbove', 'Run cells above')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.RunAbove}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={runBelow}\r\n                            disabled={!canRunBelow || this.props.busy || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.runBelow', 'Run cell and below')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.RunBelow}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={this.props.restartKernel}\r\n                            disabled={!canRestartAndInterruptKernel || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.restartServer', 'Restart Jupyter kernel')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.Restart}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={this.props.interruptKernel}\r\n                            disabled={!canRestartAndInterruptKernel || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt Jupyter kernel')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.Interrupt}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={addCell}\r\n                            disabled={!this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.addNewCell', 'Insert cell')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.InsertBelow}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={this.props.clearAllOutputs}\r\n                            disabled={!this.props.cellCount || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.clearAllOutput', 'Clear All Output')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.ClearAllOutput}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={toggleVariableExplorer}\r\n                            disabled={!this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={variableExplorerTooltip}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.VariableExplorer}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={save}\r\n                            disabled={!this.props.dirty || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.save', 'Save File')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.SaveAs}\r\n                            />\r\n                        </ImageButton>\r\n                        <ImageButton\r\n                            baseTheme={this.props.baseTheme}\r\n                            onClick={this.props.exportAs}\r\n                            disabled={!this.props.cellCount || this.props.busy || !this.props.isNotebookTrusted}\r\n                            className=\"native-button\"\r\n                            tooltip={getLocString('DataScience.notebookExportAs', 'Export as')}\r\n                        >\r\n                            <Image\r\n                                baseTheme={this.props.baseTheme}\r\n                                class=\"image-button-image\"\r\n                                image={ImageName.ExportToPython}\r\n                            />\r\n                        </ImageButton>\r\n                    </div>\r\n                    <JupyterInfo\r\n                        baseTheme={this.props.baseTheme}\r\n                        font={this.props.font}\r\n                        kernel={this.props.kernel}\r\n                        selectServer={selectServer}\r\n                        selectKernel={selectKernel}\r\n                        shouldShowTrustMessage={true}\r\n                        isNotebookTrusted={this.props.isNotebookTrusted}\r\n                        launchNotebookTrustPrompt={launchNotebookTrustPrompt}\r\n                    />\r\n                </div>\r\n                <div className=\"toolbar-divider\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport const ToolbarComponent = connect(mapStateToProps, actionCreators)(Toolbar);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { OSType } from '../../client/common/utils/platform';\r\nimport { NativeKeyboardCommandTelemetry, NativeMouseCommandTelemetry } from '../../client/datascience/constants';\r\nimport { buildSettingsCss } from '../interactive-common/buildSettingsCss';\r\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\r\nimport { handleLinkClick } from '../interactive-common/handlers';\r\nimport {\r\n    activeDebugState,\r\n    DebugState,\r\n    getSelectedAndFocusedInfo,\r\n    ICellViewModel,\r\n    IMainState\r\n} from '../interactive-common/mainState';\r\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\r\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\r\nimport { getOSType } from '../react-common/constants';\r\nimport { ErrorBoundary } from '../react-common/errorBoundary';\r\nimport { getLocString } from '../react-common/locReactSide';\r\nimport { Progress } from '../react-common/progress';\r\nimport { AddCellLine } from './addCellLine';\r\nimport { getConnectedNativeCell } from './nativeCell';\r\nimport './nativeEditor.less';\r\nimport { actionCreators } from './redux/actions';\r\nimport { ToolbarComponent } from './toolbar';\r\n\r\ntype INativeEditorProps = IMainWithVariables & typeof actionCreators;\r\n\r\nfunction mapStateToProps(state: IStore): IMainWithVariables {\r\n    return { ...state.main, variableState: state.variables };\r\n}\r\n\r\nconst ConnectedNativeCell = getConnectedNativeCell();\r\n\r\nexport class NativeEditor extends React.Component<INativeEditorProps> {\r\n    private renderCount: number = 0;\r\n    private waitingForLoadRender = true;\r\n    private mainPanelToolbarRef: React.RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    constructor(props: INativeEditorProps) {\r\n        super(props);\r\n        this.insertAboveFirst = this.insertAboveFirst.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.props.editorLoaded();\r\n        window.addEventListener('keydown', this.mainKeyDown);\r\n        window.addEventListener('resize', () => this.forceUpdate(), true);\r\n        document.addEventListener('click', this.linkClick, true);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.mainKeyDown);\r\n        window.removeEventListener('resize', () => this.forceUpdate());\r\n        document.removeEventListener('click', this.linkClick);\r\n        this.props.editorUnmounted();\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: IMainState) {\r\n        if (this.props.loaded && !prevProps.loaded && this.waitingForLoadRender) {\r\n            this.waitingForLoadRender = false;\r\n            // After this render is complete (see this SO)\r\n            // https://stackoverflow.com/questions/26556436/react-after-render-code,\r\n            // indicate we are done loading. We want to wait for the render\r\n            // so we get accurate timing on first launch.\r\n            setTimeout(() => {\r\n                window.requestAnimationFrame(() => {\r\n                    this.props.loadedAllCells();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const dynamicFont: React.CSSProperties = {\r\n            fontSize: this.props.font.size,\r\n            fontFamily: this.props.font.family\r\n        };\r\n\r\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\r\n        if (this.props.testMode) {\r\n            this.renderCount = this.renderCount + 1;\r\n        }\r\n\r\n        // Update the state controller with our new state\r\n        const progressBar = (this.props.busy || !this.props.loaded) && !this.props.testMode ? <Progress /> : undefined;\r\n        const addCellLine =\r\n            this.props.cellVMs.length === 0 ? null : (\r\n                <AddCellLine\r\n                    includePlus={true}\r\n                    className=\"add-cell-line-top\"\r\n                    click={this.insertAboveFirst}\r\n                    baseTheme={this.props.baseTheme}\r\n                    isNotebookTrusted={this.props.isNotebookTrusted}\r\n                />\r\n            );\r\n\r\n        return (\r\n            <div id=\"main-panel\" role=\"Main\" style={dynamicFont}>\r\n                <div className=\"styleSetter\">\r\n                    <style>{`${this.props.rootCss ? this.props.rootCss : ''}\r\n${buildSettingsCss(this.props.settings)}`}</style>\r\n                </div>\r\n                <header ref={this.mainPanelToolbarRef} id=\"main-panel-toolbar\">\r\n                    {this.renderToolbarPanel()}\r\n                    {progressBar}\r\n                </header>\r\n                <section\r\n                    id=\"main-panel-variable\"\r\n                    aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}\r\n                >\r\n                    {this.renderVariablePanel(this.props.baseTheme)}\r\n                </section>\r\n                <main id=\"main-panel-content\">\r\n                    {addCellLine}\r\n                    {this.renderContentPanel(this.props.baseTheme)}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private insertAboveFirst() {\r\n        setTimeout(() => this.props.insertAboveFirst(), 1);\r\n    }\r\n    private renderToolbarPanel() {\r\n        return <ToolbarComponent isNotebookTrusted={this.props.isNotebookTrusted}></ToolbarComponent>;\r\n    }\r\n\r\n    private renderVariablePanel(baseTheme: string) {\r\n        if (this.props.variableState.visible) {\r\n            const variableProps = this.getVariableProps(baseTheme);\r\n            return <VariablePanel {...variableProps} />;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private renderContentPanel(baseTheme: string) {\r\n        // Skip if the tokenizer isn't finished yet. It needs\r\n        // to finish loading so our code editors work.\r\n        if (!this.props.monacoReady && !this.props.testMode) {\r\n            return null;\r\n        }\r\n\r\n        // Otherwise render our cells.\r\n        const contentProps = this.getContentProps(baseTheme);\r\n        return <ContentPanel {...contentProps} />;\r\n    }\r\n\r\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\r\n        return {\r\n            baseTheme: baseTheme,\r\n            cellVMs: this.props.cellVMs,\r\n            testMode: this.props.testMode,\r\n            codeTheme: this.props.codeTheme,\r\n            submittedText: this.props.submittedText,\r\n            skipNextScroll: this.props.skipNextScroll ? true : false,\r\n            editable: true,\r\n            renderCell: this.renderCell,\r\n            scrollToBottom: this.scrollDiv,\r\n            scrollBeyondLastLine: this.props.settings\r\n                ? this.props.settings.extraSettings.editor.scrollBeyondLastLine\r\n                : false\r\n        };\r\n    };\r\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\r\n        let toolbarHeight = 0;\r\n        if (this.mainPanelToolbarRef.current) {\r\n            toolbarHeight = this.mainPanelToolbarRef.current.offsetHeight;\r\n        }\r\n        return {\r\n            variables: this.props.variableState.variables,\r\n            containerHeight: this.props.variableState.containerHeight,\r\n            gridHeight: this.props.variableState.gridHeight,\r\n            debugging: this.props.debugging,\r\n            busy: this.props.busy,\r\n            showDataExplorer: this.props.showDataViewer,\r\n            skipDefault: this.props.skipDefault,\r\n            testMode: this.props.testMode,\r\n            closeVariableExplorer: this.props.toggleVariableExplorer,\r\n            setVariableExplorerHeight: this.props.setVariableExplorerHeight,\r\n            baseTheme: baseTheme,\r\n            pageIn: this.pageInVariableData,\r\n            fontSize: this.props.font.size,\r\n            executionCount: this.props.currentExecutionCount,\r\n            refreshCount: this.props.variableState.refreshCount,\r\n            offsetHeight: toolbarHeight\r\n        };\r\n    };\r\n\r\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\r\n        this.props.getVariableData(\r\n            this.props.currentExecutionCount,\r\n            this.props.variableState.refreshCount,\r\n            startIndex,\r\n            pageSize\r\n        );\r\n    };\r\n\r\n    private isNotebookTrusted = () => {\r\n        return this.props.isNotebookTrusted;\r\n    };\r\n\r\n    // tslint:disable-next-line: cyclomatic-complexity\r\n    private mainKeyDown = (event: KeyboardEvent) => {\r\n        if (!this.isNotebookTrusted()) {\r\n            return; // Disable keyboard interaction with untrusted notebooks\r\n        }\r\n        // Handler for key down presses in the main panel\r\n        switch (event.key) {\r\n            // tslint:disable-next-line: no-suspicious-comment\r\n            // TODO: How to have this work for when the keyboard shortcuts are changed?\r\n            case 's': {\r\n                if (!this.props.settings?.extraSettings.useCustomEditorApi) {\r\n                    if (\r\n                        (event.ctrlKey && getOSType() !== OSType.OSX) ||\r\n                        (event.metaKey && getOSType() === OSType.OSX)\r\n                    ) {\r\n                        // This is save, save our cells\r\n                        this.props.save();\r\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Save);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'z':\r\n            case 'Z':\r\n                if (\r\n                    !getSelectedAndFocusedInfo(this.props).focusedCellId &&\r\n                    !this.props.settings?.extraSettings.useCustomEditorApi\r\n                ) {\r\n                    if (event.shiftKey && !event.ctrlKey && !event.altKey && !event.metaKey) {\r\n                        event.stopPropagation();\r\n                        this.props.redo();\r\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Redo);\r\n                    } else if (!event.shiftKey && !event.altKey && !event.ctrlKey && !event.metaKey) {\r\n                        event.stopPropagation();\r\n                        this.props.undo();\r\n                        this.props.sendCommand(NativeKeyboardCommandTelemetry.Undo);\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'F10':\r\n                if (this.props.debugging) {\r\n                    // Only allow step if debugging in break mode\r\n                    const debuggingCell = this.props.cellVMs.find((cvm) => cvm.runningByLine === DebugState.Break);\r\n                    if (debuggingCell) {\r\n                        this.props.step(debuggingCell.cell.id);\r\n                    }\r\n                    event.stopPropagation();\r\n                } else {\r\n                    // Otherwise if not debugging, run by line the current focused cell\r\n                    const focusedCell = getSelectedAndFocusedInfo(this.props).focusedCellId;\r\n                    if (focusedCell) {\r\n                        this.props.runByLine(focusedCell);\r\n                    }\r\n                }\r\n                break;\r\n            case 'F5':\r\n                if (this.props.debugging) {\r\n                    // Only allow continue if debugging in break mode\r\n                    const debuggingCell = this.props.cellVMs.find((cvm) => cvm.runningByLine === DebugState.Break);\r\n                    if (debuggingCell) {\r\n                        this.props.continue(debuggingCell.cell.id);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    // private copyToClipboard = (cellId: string) => {\r\n    //     const cell = this.props.findCell(cellId);\r\n    //     if (cell) {\r\n    //         // Need to do this in this process so it copies to the user's clipboard and not\r\n    //         // the remote clipboard where the extension is running\r\n    //         const textArea = document.createElement('textarea');\r\n    //         textArea.value = concatMultilineString(cell.cell.data.source);\r\n    //         document.body.appendChild(textArea);\r\n    //         textArea.select();\r\n    //         document.execCommand('Copy');\r\n    //         textArea.remove();\r\n    //     }\r\n    // }\r\n\r\n    // private pasteFromClipboard = (cellId: string) => {\r\n    //     const editedCells = this.props.cellVMs;\r\n    //     const index = editedCells.findIndex(x => x.cell.id === cellId) + 1;\r\n\r\n    //     if (index > -1) {\r\n    //         const textArea = document.createElement('textarea');\r\n    //         document.body.appendChild(textArea);\r\n    //         textArea.select();\r\n    //         document.execCommand('Paste');\r\n    //         editedCells[index].cell.data.source = textArea.value.split(/\\r?\\n/);\r\n    //         textArea.remove();\r\n    //     }\r\n\r\n    //     this.setState({\r\n    //         cellVMs: editedCells\r\n    //     });\r\n    // }\r\n\r\n    private renderCell = (cellVM: ICellViewModel, index: number): JSX.Element | null => {\r\n        // Don't render until we have settings\r\n        if (!this.props.settings || !this.props.editorOptions) {\r\n            return null;\r\n        }\r\n        const addNewCell = () => {\r\n            setTimeout(() => this.props.insertBelow(cellVM.cell.id), 1);\r\n            this.props.sendCommand(NativeMouseCommandTelemetry.AddToEnd);\r\n        };\r\n        const firstLine = index === 0;\r\n        const lastLine =\r\n            index === this.props.cellVMs.length - 1 ? (\r\n                <AddCellLine\r\n                    includePlus={true}\r\n                    baseTheme={this.props.baseTheme}\r\n                    className=\"add-cell-line-cell\"\r\n                    click={addNewCell}\r\n                    isNotebookTrusted={this.props.isNotebookTrusted}\r\n                />\r\n            ) : null;\r\n\r\n        const otherCellRunningByLine = this.props.cellVMs.find(\r\n            (cvm) => activeDebugState(cvm.runningByLine) && cvm.cell.id !== cellVM.cell.id\r\n        );\r\n        const maxOutputSize = this.props.settings.maxOutputSize;\r\n        const outputSizeLimit = 10000;\r\n        const maxTextSize =\r\n            maxOutputSize && maxOutputSize < outputSizeLimit && maxOutputSize > 0\r\n                ? maxOutputSize\r\n                : this.props.settings.enableScrollingForCellOutputs\r\n                ? 400\r\n                : undefined;\r\n\r\n        return (\r\n            <div key={cellVM.cell.id} id={cellVM.cell.id}>\r\n                <ErrorBoundary>\r\n                    <ConnectedNativeCell\r\n                        role=\"listitem\"\r\n                        maxTextSize={maxTextSize}\r\n                        enableScroll={this.props.settings.enableScrollingForCellOutputs}\r\n                        testMode={this.props.testMode}\r\n                        cellVM={cellVM}\r\n                        baseTheme={this.props.baseTheme}\r\n                        codeTheme={this.props.codeTheme}\r\n                        monacoTheme={this.props.monacoTheme}\r\n                        lastCell={lastLine !== null}\r\n                        firstCell={firstLine}\r\n                        font={this.props.font}\r\n                        allowUndo={this.props.undoStack.length > 0}\r\n                        editorOptions={this.props.editorOptions}\r\n                        themeMatplotlibPlots={this.props.settings.themeMatplotlibPlots}\r\n                        // Focus pending does not apply to native editor.\r\n                        focusPending={0}\r\n                        busy={this.props.busy}\r\n                        useCustomEditorApi={this.props.settings?.extraSettings.useCustomEditorApi}\r\n                        runningByLine={cellVM.runningByLine}\r\n                        supportsRunByLine={\r\n                            this.props.settings?.extraSettings.hasPythonExtension\r\n                                ? otherCellRunningByLine === undefined\r\n                                : false\r\n                        }\r\n                        language={this.props.kernel.language}\r\n                        isNotebookTrusted={this.props.isNotebookTrusted}\r\n                        externalButtons={this.props.externalButtons}\r\n                    />\r\n                </ErrorBoundary>\r\n                {lastLine}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    private scrollDiv = (_div: HTMLDivElement) => {\r\n        // Doing nothing for now. This should be implemented once redux refactor is done.\r\n    };\r\n\r\n    private linkClick = (ev: MouseEvent) => {\r\n        handleLinkClick(ev, this.props.linkClick);\r\n    };\r\n}\r\n\r\n// Main export, return a redux connected editor\r\nexport function getConnectedNativeEditor() {\r\n    return connect(mapStateToProps, actionCreators)(NativeEditor);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport { CssMessages } from '../../../../client/datascience/messages';\r\nimport { IJupyterExtraSettings } from '../../../../client/datascience/types';\r\nimport { getSelectedAndFocusedInfo, IMainState } from '../../../interactive-common/mainState';\r\nimport { postActionToExtension } from '../../../interactive-common/redux/helpers';\r\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\r\nimport { ICellAction, ICellAndCursorAction } from '../../../interactive-common/redux/reducers/types';\r\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\r\nimport { NativeEditorReducerArg } from '../mapping';\r\n\r\nexport namespace Effects {\r\n    export function focusCell(arg: NativeEditorReducerArg<ICellAndCursorAction>): IMainState {\r\n        // Do nothing if already the focused cell.\r\n        let selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\r\n        if (selectionInfo.focusedCellId !== arg.payload.data.cellId) {\r\n            let prevState = arg.prevState;\r\n\r\n            // Ensure we unfocus & unselect all cells.\r\n            while (selectionInfo.focusedCellId || selectionInfo.selectedCellId) {\r\n                selectionInfo = getSelectedAndFocusedInfo(prevState);\r\n                // First find the old focused cell and unfocus it\r\n                let removeFocusIndex = selectionInfo.focusedCellIndex;\r\n                if (typeof removeFocusIndex !== 'number') {\r\n                    removeFocusIndex = selectionInfo.selectedCellIndex;\r\n                }\r\n\r\n                if (typeof removeFocusIndex === 'number') {\r\n                    prevState = unfocusCell({\r\n                        ...arg,\r\n                        prevState,\r\n                        payload: {\r\n                            ...arg.payload,\r\n                            data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\r\n                        }\r\n                    });\r\n                    prevState = deselectCell({\r\n                        ...arg,\r\n                        prevState,\r\n                        payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\r\n                    });\r\n                }\r\n            }\r\n\r\n            const newVMs = [...prevState.cellVMs];\r\n\r\n            // Add focus on new cell\r\n            const addFocusIndex = newVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n            if (addFocusIndex >= 0) {\r\n                newVMs[addFocusIndex] = {\r\n                    ...newVMs[addFocusIndex],\r\n                    focused: true,\r\n                    selected: true,\r\n                    cursorPos: arg.payload.data.cursorPos\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function unfocusCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        // Unfocus the cell\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\r\n        if (index >= 0 && selectionInfo.focusedCellId === arg.payload.data.cellId) {\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            const current = arg.prevState.cellVMs[index];\r\n            const newCell = {\r\n                ...current,\r\n                focused: false\r\n            };\r\n\r\n            // tslint:disable-next-line: no-any\r\n            newVMs[index] = Helpers.asCellViewModel(newCell); // This is because IMessageCell doesn't fit in here\r\n\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        } else if (index >= 0) {\r\n            // Dont change focus state if not the focused cell. Just update the code.\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            const current = arg.prevState.cellVMs[index];\r\n            const newCell = {\r\n                ...current\r\n            };\r\n\r\n            // tslint:disable-next-line: no-any\r\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\r\n\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function deselectCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\r\n        if (index >= 0 && selectionInfo.selectedCellId === arg.payload.data.cellId) {\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            const target = arg.prevState.cellVMs[index];\r\n            const newCell = {\r\n                ...target,\r\n                selected: false\r\n            };\r\n\r\n            // tslint:disable-next-line: no-any\r\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\r\n\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    /**\r\n     * Select a cell.\r\n     *\r\n     * @param {boolean} [shouldFocusCell] If provided, then will control the focus behavior of the cell. (defaults to focus state of previously selected cell).\r\n     */\r\n    export function selectCell(\r\n        arg: NativeEditorReducerArg<ICellAndCursorAction>,\r\n        shouldFocusCell?: boolean\r\n    ): IMainState {\r\n        // Skip doing anything if already selected.\r\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\r\n        if (arg.payload.data.cellId !== selectionInfo.selectedCellId) {\r\n            let prevState = arg.prevState;\r\n            const addIndex = prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n            const someOtherCellWasFocusedAndSelected =\r\n                selectionInfo.focusedCellId === selectionInfo.selectedCellId && !!selectionInfo.focusedCellId;\r\n            // First find the old focused cell and unfocus it\r\n            let removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.focusedCellId);\r\n            if (removeFocusIndex < 0) {\r\n                removeFocusIndex = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\r\n            }\r\n\r\n            if (removeFocusIndex >= 0) {\r\n                prevState = unfocusCell({\r\n                    ...arg,\r\n                    prevState,\r\n                    payload: {\r\n                        ...arg.payload,\r\n                        data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id }\r\n                    }\r\n                });\r\n                prevState = deselectCell({\r\n                    ...arg,\r\n                    prevState,\r\n                    payload: { ...arg.payload, data: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } }\r\n                });\r\n            }\r\n\r\n            const newVMs = [...prevState.cellVMs];\r\n            if (addIndex >= 0 && arg.payload.data.cellId !== selectionInfo.selectedCellId) {\r\n                newVMs[addIndex] = {\r\n                    ...newVMs[addIndex],\r\n                    focused:\r\n                        typeof shouldFocusCell === 'boolean' ? shouldFocusCell : someOtherCellWasFocusedAndSelected,\r\n                    selected: true,\r\n                    cursorPos: arg.payload.data.cursorPos\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function toggleLineNumbers(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            newVMs[index] = { ...newVMs[index], showLineNumbers: !newVMs[index].showLineNumbers };\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function toggleOutput(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            newVMs[index] = { ...newVMs[index], hideOutput: !newVMs[index].hideOutput };\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function updateSettings(arg: NativeEditorReducerArg<string>): IMainState {\r\n        // String arg should be the IDataScienceExtraSettings\r\n        const newSettingsJSON = JSON.parse(arg.payload.data);\r\n        const newSettings = <IJupyterExtraSettings>newSettingsJSON;\r\n        const newEditorOptions = computeEditorOptions(newSettings);\r\n        const newFontFamily = newSettings.extraSettings\r\n            ? newSettings.extraSettings.editor.fontFamily\r\n            : arg.prevState.font.family;\r\n        const newFontSize = newSettings.extraSettings\r\n            ? newSettings.extraSettings.editor.fontSize\r\n            : arg.prevState.font.size;\r\n\r\n        // Ask for new theme data if necessary\r\n        if (\r\n            newSettings &&\r\n            newSettings.extraSettings &&\r\n            newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName\r\n        ) {\r\n            const knownDark = Helpers.computeKnownDark(newSettings);\r\n            // User changed the current theme. Rerender\r\n            postActionToExtension(arg, CssMessages.GetCssRequest, { isDark: knownDark });\r\n            postActionToExtension(arg, CssMessages.GetMonacoThemeRequest, { isDark: knownDark });\r\n        }\r\n\r\n        return {\r\n            ...arg.prevState,\r\n            settings: newSettings,\r\n            editorOptions: { ...newEditorOptions, lineDecorationsWidth: 5 },\r\n            font: {\r\n                size: newFontSize,\r\n                family: newFontFamily\r\n            }\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\n// tslint:disable-next-line: no-require-imports no-var-requires\r\nconst cloneDeep = require('lodash/cloneDeep');\r\nimport * as uuid from 'uuid/v4';\r\nimport { DebugProtocol } from 'vscode-debugprotocol';\r\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\r\nimport { CellState, ICell } from '../../../../client/datascience/types';\r\nimport { concatMultilineString } from '../../../common';\r\nimport { createCellFrom } from '../../../common/cellFactory';\r\nimport {\r\n    CursorPos,\r\n    DebugState,\r\n    getSelectedAndFocusedInfo,\r\n    ICellViewModel,\r\n    IMainState\r\n} from '../../../interactive-common/mainState';\r\nimport { postActionToExtension, queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\r\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\r\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\r\nimport {\r\n    CommonActionType,\r\n    ICellAction,\r\n    IChangeCellTypeAction,\r\n    IExecuteAction\r\n} from '../../../interactive-common/redux/reducers/types';\r\nimport { NativeEditorReducerArg } from '../mapping';\r\nimport { Effects } from './effects';\r\n\r\nexport namespace Execution {\r\n    function executeRange(\r\n        prevState: IMainState,\r\n        cellIds: string[],\r\n        // tslint:disable-next-line: no-any\r\n        originalArg: NativeEditorReducerArg<any>\r\n    ): IMainState {\r\n        const newVMs = [...prevState.cellVMs];\r\n        const cellIdsToExecute: string[] = [];\r\n        cellIds.forEach((cellId) => {\r\n            const index = prevState.cellVMs.findIndex((cell) => cell.cell.id === cellId);\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n            const orig = prevState.cellVMs[index];\r\n            // noop if the submitted code is just a cell marker\r\n            if (orig.cell.data.cell_type === 'code' && concatMultilineString(orig.cell.data.source)) {\r\n                // When cloning cells, preserve the metadata (hence deep clone).\r\n                const clonedCell = cloneDeep(orig.cell.data);\r\n                // Update our input cell to be in progress again and clear outputs\r\n                clonedCell.outputs = [];\r\n                newVMs[index] = Helpers.asCellViewModel({\r\n                    ...orig,\r\n                    cell: { ...orig.cell, state: CellState.executing, data: clonedCell }\r\n                });\r\n                cellIdsToExecute.push(orig.cell.id);\r\n            }\r\n        });\r\n\r\n        // If any cells to execute, execute them all\r\n        if (cellIdsToExecute.length > 0) {\r\n            // Send a message if a code cell\r\n            postActionToExtension(originalArg, InteractiveWindowMessages.ReExecuteCells, {\r\n                cellIds: cellIdsToExecute\r\n            });\r\n        }\r\n\r\n        return {\r\n            ...prevState,\r\n            cellVMs: newVMs\r\n        };\r\n    }\r\n\r\n    export function executeAbove(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index > 0) {\r\n            // Get all cellIds until `index`.\r\n            const cellIds = arg.prevState.cellVMs.slice(0, index).map((cellVm) => cellVm.cell.id);\r\n            return executeRange(arg.prevState, cellIds, arg);\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function executeCellAndAdvance(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\r\n        queueIncomingActionWithPayload(arg, CommonActionType.EXECUTE_CELL, {\r\n            cellId: arg.payload.data.cellId,\r\n            moveOp: arg.payload.data.moveOp\r\n        });\r\n        if (arg.payload.data.moveOp === 'add') {\r\n            const newCellId = uuid();\r\n            queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\r\n                cellId: arg.payload.data.cellId,\r\n                newCellId\r\n            });\r\n            queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\r\n                cellId: newCellId,\r\n                cursorPos: CursorPos.Current\r\n            });\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function executeCell(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0 && arg.payload.data.cellId) {\r\n            // Start executing this cell.\r\n            const executeResult = executeRange(arg.prevState, [arg.payload.data.cellId], arg);\r\n\r\n            // Modify the execute result if moving\r\n            if (arg.payload.data.moveOp === 'select') {\r\n                // Select the cell below this one, but don't focus it\r\n                if (index < arg.prevState.cellVMs.length - 1) {\r\n                    return Effects.selectCell(\r\n                        {\r\n                            ...arg,\r\n                            prevState: {\r\n                                ...executeResult\r\n                            },\r\n                            payload: {\r\n                                ...arg.payload,\r\n                                data: {\r\n                                    ...arg.payload.data,\r\n                                    cellId: arg.prevState.cellVMs[index + 1].cell.id,\r\n                                    cursorPos: CursorPos.Current\r\n                                }\r\n                            }\r\n                        },\r\n                        // Select the next cell, but do not set focus to it.\r\n                        false\r\n                    );\r\n                }\r\n                return executeResult;\r\n            } else {\r\n                return executeResult;\r\n            }\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function executeCellAndBelow(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            // Get all cellIds starting from `index`.\r\n            const cellIds = arg.prevState.cellVMs.slice(index).map((cellVm) => cellVm.cell.id);\r\n            return executeRange(arg.prevState, cellIds, arg);\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function executeAllCells(arg: NativeEditorReducerArg): IMainState {\r\n        if (arg.prevState.cellVMs.length > 0) {\r\n            const cellIds = arg.prevState.cellVMs.map((cellVm) => cellVm.cell.id);\r\n            return executeRange(arg.prevState, cellIds, arg);\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function executeSelectedCell(arg: NativeEditorReducerArg): IMainState {\r\n        // This is the same thing as executing the selected cell\r\n        const selectionInfo = getSelectedAndFocusedInfo(arg.prevState);\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === selectionInfo.selectedCellId);\r\n        if (selectionInfo.selectedCellId && index >= 0) {\r\n            return executeCell({\r\n                ...arg,\r\n                payload: {\r\n                    ...arg.payload,\r\n                    data: {\r\n                        cellId: selectionInfo.selectedCellId,\r\n                        moveOp: 'none'\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function clearAllOutputs(arg: NativeEditorReducerArg): IMainState {\r\n        const newList = arg.prevState.cellVMs.map((cellVM) => {\r\n            return Helpers.asCellViewModel({\r\n                ...cellVM,\r\n                cell: { ...cellVM.cell, data: { ...cellVM.cell.data, outputs: [], execution_count: null } }\r\n            });\r\n        });\r\n\r\n        Transfer.postModelClearOutputs(arg);\r\n\r\n        return {\r\n            ...arg.prevState,\r\n            cellVMs: newList\r\n        };\r\n    }\r\n\r\n    export function changeCellType(arg: NativeEditorReducerArg<IChangeCellTypeAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            const cellVMs = [...arg.prevState.cellVMs];\r\n            const current = arg.prevState.cellVMs[index];\r\n            const newType = current.cell.data.cell_type === 'code' ? 'markdown' : 'code';\r\n            const newNotebookCell = createCellFrom(current.cell.data, newType);\r\n            const newCell: ICellViewModel = {\r\n                ...current,\r\n                cell: {\r\n                    ...current.cell,\r\n                    data: newNotebookCell\r\n                }\r\n            };\r\n            cellVMs[index] = newCell;\r\n            Transfer.changeCellType(arg, cellVMs[index].cell);\r\n\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function undo(arg: NativeEditorReducerArg): IMainState {\r\n        if (arg.prevState.undoStack.length > 0) {\r\n            // Pop one off of our undo stack and update our redo\r\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\r\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\r\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\r\n            postActionToExtension(arg, InteractiveWindowMessages.Undo);\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: cells,\r\n                undoStack: undoStack,\r\n                redoStack: redoStack,\r\n                skipNextScroll: true\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function redo(arg: NativeEditorReducerArg): IMainState {\r\n        if (arg.prevState.redoStack.length > 0) {\r\n            // Pop one off of our redo stack and update our undo\r\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\r\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\r\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\r\n            postActionToExtension(arg, InteractiveWindowMessages.Redo);\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: cells,\r\n                undoStack: undoStack,\r\n                redoStack: redoStack,\r\n                skipNextScroll: true\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function continueExec(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            postActionToExtension(arg, InteractiveWindowMessages.Continue);\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function step(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            postActionToExtension(arg, InteractiveWindowMessages.Step);\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function runByLine(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cellId);\r\n        if (index >= 0) {\r\n            postActionToExtension(arg, InteractiveWindowMessages.RunByLine, {\r\n                cell: arg.prevState.cellVMs[index].cell,\r\n                expectedExecutionCount: arg.prevState.currentExecutionCount + 1\r\n            });\r\n            const newVM = {\r\n                ...arg.prevState.cellVMs[index],\r\n                runningByLine: DebugState.Run\r\n            };\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            newVMs[index] = newVM;\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function handleBreakState(\r\n        arg: NativeEditorReducerArg<{ frames: DebugProtocol.StackFrame[]; cell: ICell }>\r\n    ): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.cell.id);\r\n        if (index >= 0) {\r\n            const newVM = {\r\n                ...arg.prevState.cellVMs[index],\r\n                runningByLine: DebugState.Break,\r\n                currentStack: arg.payload.data.frames\r\n            };\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            newVMs[index] = newVM;\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function handleContinue(arg: NativeEditorReducerArg<ICell>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((cv) => cv.cell.id === arg.payload.data.id);\r\n        if (index >= 0) {\r\n            const newVM = {\r\n                ...arg.prevState.cellVMs[index],\r\n                runningByLine: DebugState.Run,\r\n                currentStack: undefined\r\n            };\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            newVMs[index] = newVM;\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs\r\n            };\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function startDebugging(arg: NativeEditorReducerArg): IMainState {\r\n        return {\r\n            ...arg.prevState,\r\n            debugging: true\r\n        };\r\n    }\r\n\r\n    export function stopDebugging(arg: NativeEditorReducerArg): IMainState {\r\n        // Clear out any cells that have frames\r\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.currentStack);\r\n        const newVMs = [...arg.prevState.cellVMs];\r\n        if (index >= 0) {\r\n            const newVM = {\r\n                ...newVMs[index],\r\n                currentStack: undefined\r\n            };\r\n            newVMs[index] = newVM;\r\n        }\r\n        return {\r\n            ...arg.prevState,\r\n            cellVMs: newVMs,\r\n            debugging: false\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport { CursorPos, IMainState } from '../../../interactive-common/mainState';\r\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\r\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\r\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\r\nimport { CommonActionType, ICellAction, ICodeAction } from '../../../interactive-common/redux/reducers/types';\r\nimport { NativeEditorReducerArg } from '../mapping';\r\n\r\nexport namespace Movement {\r\n    export function swapCells(arg: NativeEditorReducerArg<{ firstCellId: string; secondCellId: string }>) {\r\n        const newVMs = [...arg.prevState.cellVMs];\r\n        const first = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.firstCellId);\r\n        const second = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.secondCellId);\r\n        if (first >= 0 && second >= 0 && first !== second) {\r\n            const temp = newVMs[first];\r\n            newVMs[first] = newVMs[second];\r\n            newVMs[second] = temp;\r\n            Transfer.postModelSwap(arg, arg.payload.data.firstCellId, arg.payload.data.secondCellId);\r\n            return {\r\n                ...arg.prevState,\r\n                cellVMs: newVMs,\r\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\r\n            };\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function moveCellUp(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\r\n        if (index > 0 && arg.payload.data.cellId) {\r\n            return swapCells({\r\n                ...arg,\r\n                payload: {\r\n                    ...arg.payload,\r\n                    data: {\r\n                        firstCellId: arg.prevState.cellVMs[index - 1].cell.id,\r\n                        secondCellId: arg.payload.data.cellId\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function moveCellDown(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const newVMs = [...arg.prevState.cellVMs];\r\n        const index = newVMs.findIndex((cvm) => cvm.cell.id === arg.payload.data.cellId);\r\n        if (index < newVMs.length - 1 && arg.payload.data.cellId) {\r\n            return swapCells({\r\n                ...arg,\r\n                payload: {\r\n                    ...arg.payload,\r\n                    data: {\r\n                        firstCellId: arg.payload.data.cellId,\r\n                        secondCellId: arg.prevState.cellVMs[index + 1].cell.id\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function arrowUp(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index > 0) {\r\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\r\n                cellId: arg.prevState.cellVMs[index - 1].cell.id,\r\n                cursorPos: CursorPos.Bottom\r\n            });\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function arrowDown(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (index < arg.prevState.cellVMs.length - 1) {\r\n            queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\r\n                cellId: arg.prevState.cellVMs[index + 1].cell.id,\r\n                cursorPos: CursorPos.Top\r\n            });\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\n\r\nimport { noop } from '../../../../client/common/utils/misc';\r\nimport {\r\n    IEditorContentChange,\r\n    IFinishCell,\r\n    ILoadAllCells,\r\n    NotebookModelChange\r\n} from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\r\nimport { ICell, IJupyterExtraSettings } from '../../../../client/datascience/types';\r\nimport { splitMultilineString } from '../../../common';\r\nimport {\r\n    createCellVM,\r\n    createEmptyCell,\r\n    CursorPos,\r\n    DebugState,\r\n    extractInputText,\r\n    getSelectedAndFocusedInfo,\r\n    ICellViewModel,\r\n    IMainState\r\n} from '../../../interactive-common/mainState';\r\nimport { queueIncomingActionWithPayload } from '../../../interactive-common/redux/helpers';\r\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\r\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\r\nimport { CommonActionType, IAddCellAction, ICellAction } from '../../../interactive-common/redux/reducers/types';\r\nimport { NativeEditorReducerArg } from '../mapping';\r\nimport { Effects } from './effects';\r\nimport { Execution } from './execution';\r\nimport { Movement } from './movement';\r\n\r\nexport namespace Creation {\r\n    function prepareCellVM(cell: ICell, hasBeenRun: boolean, settings?: IJupyterExtraSettings): ICellViewModel {\r\n        const cellVM: ICellViewModel = createCellVM(cell, settings, true, false);\r\n\r\n        // Set initial cell visibility and collapse\r\n        cellVM.editable = true;\r\n\r\n        // Always have the cell input text open\r\n        const newText = extractInputText(cellVM, settings);\r\n\r\n        cellVM.inputBlockOpen = true;\r\n        cell.data.source = splitMultilineString(newText);\r\n        cellVM.hasBeenRun = hasBeenRun;\r\n\r\n        return cellVM;\r\n    }\r\n\r\n    export function addAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\r\n        queueIncomingActionWithPayload(arg, CommonActionType.ADD_NEW_CELL, { newCellId: arg.payload.data.newCellId });\r\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\r\n            cellId: arg.payload.data.newCellId,\r\n            cursorPos: CursorPos.Current\r\n        });\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function insertAboveAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\r\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE, {\r\n            cellId: arg.payload.data.cellId,\r\n            newCellId: arg.payload.data.newCellId\r\n        });\r\n        queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\r\n            cellId: arg.payload.data.newCellId,\r\n            cursorPos: CursorPos.Current\r\n        });\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function insertBelowAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction & ICellAction>): IMainState {\r\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_BELOW, {\r\n            cellId: arg.payload.data.cellId,\r\n            newCellId: arg.payload.data.newCellId\r\n        });\r\n        queueIncomingActionWithPayload(arg, CommonActionType.SELECT_CELL, {\r\n            cellId: arg.payload.data.newCellId,\r\n            cursorPos: CursorPos.Current\r\n        });\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function insertAboveFirstAndFocusCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\r\n        queueIncomingActionWithPayload(arg, CommonActionType.INSERT_ABOVE_FIRST, {\r\n            newCellId: arg.payload.data.newCellId\r\n        });\r\n        queueIncomingActionWithPayload(arg, CommonActionType.FOCUS_CELL, {\r\n            cellId: arg.payload.data.newCellId,\r\n            cursorPos: CursorPos.Current\r\n        });\r\n        return arg.prevState;\r\n    }\r\n\r\n    function insertAbove(arg: NativeEditorReducerArg<ICellAction & { vm: ICellViewModel }>): IMainState {\r\n        const newList = [...arg.prevState.cellVMs];\r\n        const newVM = arg.payload.data.vm;\r\n\r\n        // Find the position where we want to insert\r\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (position >= 0) {\r\n            newList.splice(position, 0, newVM);\r\n        } else {\r\n            newList.splice(0, 0, newVM);\r\n            position = 0;\r\n        }\r\n\r\n        const result = {\r\n            ...arg.prevState,\r\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\r\n            cellVMs: newList\r\n        };\r\n\r\n        // Send a messsage that we inserted a cell\r\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\r\n\r\n        return result;\r\n    }\r\n\r\n    export function insertExistingAbove(arg: NativeEditorReducerArg<ICellAction & { cell: ICell }>): IMainState {\r\n        const newVM = prepareCellVM(arg.payload.data.cell, false, arg.prevState.settings);\r\n        return insertAbove({\r\n            ...arg,\r\n            payload: {\r\n                ...arg.payload,\r\n                data: {\r\n                    cellId: arg.payload.data.cellId,\r\n                    vm: newVM\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    export function insertNewAbove(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\r\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\r\n        return insertAbove({\r\n            ...arg,\r\n            payload: {\r\n                ...arg.payload,\r\n                data: {\r\n                    cellId: arg.payload.data.cellId,\r\n                    vm: newVM\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    export function insertBelow(arg: NativeEditorReducerArg<ICellAction & IAddCellAction>): IMainState {\r\n        const newVM = prepareCellVM(createEmptyCell(arg.payload.data.newCellId, null), false, arg.prevState.settings);\r\n        const newList = [...arg.prevState.cellVMs];\r\n\r\n        // Find the position where we want to insert\r\n        let position = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n        if (position >= 0) {\r\n            position += 1;\r\n            newList.splice(position, 0, newVM);\r\n        } else {\r\n            newList.push(newVM);\r\n            position = newList.length;\r\n        }\r\n\r\n        const result = {\r\n            ...arg.prevState,\r\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\r\n            cellVMs: newList\r\n        };\r\n\r\n        // Send a messsage that we inserted a cell\r\n        Transfer.postModelInsert(arg, position, newVM.cell, arg.payload.data.cellId);\r\n\r\n        return result;\r\n    }\r\n\r\n    export function insertAboveFirst(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\r\n        // Get the first cell id\r\n        const firstCellId = arg.prevState.cellVMs.length > 0 ? arg.prevState.cellVMs[0].cell.id : undefined;\r\n\r\n        // Do what an insertAbove does\r\n        return insertNewAbove({\r\n            ...arg,\r\n            payload: { ...arg.payload, data: { cellId: firstCellId, newCellId: arg.payload.data.newCellId } }\r\n        });\r\n    }\r\n\r\n    export function addNewCell(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\r\n        // Do the same thing that an insertBelow does using the currently selected cell.\r\n        return insertBelow({\r\n            ...arg,\r\n            payload: {\r\n                ...arg.payload,\r\n                data: {\r\n                    cellId: getSelectedAndFocusedInfo(arg.prevState).selectedCellId,\r\n                    newCellId: arg.payload.data.newCellId\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    export function startCell(arg: NativeEditorReducerArg<ICell>): IMainState {\r\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\r\n    }\r\n\r\n    export function updateCell(arg: NativeEditorReducerArg<ICell>): IMainState {\r\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\r\n    }\r\n\r\n    export function finishCell(arg: NativeEditorReducerArg<IFinishCell>): IMainState {\r\n        return Helpers.updateOrAdd(\r\n            { ...arg, payload: { ...arg.payload, data: arg.payload.data.cell } },\r\n            (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings)\r\n        );\r\n    }\r\n\r\n    export function deleteAllCells(arg: NativeEditorReducerArg<IAddCellAction>): IMainState {\r\n        // Just leave one single blank empty cell\r\n        const newVM: ICellViewModel = {\r\n            cell: createEmptyCell(arg.payload.data.newCellId, null),\r\n            editable: true,\r\n            inputBlockOpen: true,\r\n            inputBlockShow: true,\r\n            inputBlockText: '',\r\n            inputBlockCollapseNeeded: false,\r\n            selected: false,\r\n            focused: false,\r\n            cursorPos: CursorPos.Current,\r\n            hasBeenRun: false,\r\n            scrollCount: 0,\r\n            runningByLine: DebugState.Design\r\n        };\r\n\r\n        Transfer.postModelRemoveAll(arg, newVM.cell.id);\r\n\r\n        return {\r\n            ...arg.prevState,\r\n            cellVMs: [newVM],\r\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\r\n        };\r\n    }\r\n\r\n    export function applyCellEdit(\r\n        arg: NativeEditorReducerArg<{ id: string; changes: IEditorContentChange[] }>\r\n    ): IMainState {\r\n        const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.id);\r\n        if (index >= 0) {\r\n            const newVM = { ...arg.prevState.cellVMs[index] };\r\n            arg.payload.data.changes.forEach((c) => {\r\n                const source = newVM.inputBlockText;\r\n                const before = source.slice(0, c.rangeOffset);\r\n                // tslint:disable-next-line: restrict-plus-operands\r\n                const after = source.slice(c.rangeOffset + c.rangeLength);\r\n                newVM.inputBlockText = `${before}${c.text}${after}`;\r\n            });\r\n            newVM.codeVersion = newVM.codeVersion ? newVM.codeVersion + 1 : 1;\r\n            newVM.cell.data.source = splitMultilineString(newVM.inputBlockText);\r\n            newVM.cursorPos = arg.payload.data.changes[0].position;\r\n            const newVMs = [...arg.prevState.cellVMs];\r\n            newVMs[index] = Helpers.asCellViewModel(newVM);\r\n            // When editing, make sure we focus the edited cell (otherwise undo looks weird because it undoes a non focused cell)\r\n            return Effects.focusCell({\r\n                ...arg,\r\n                prevState: { ...arg.prevState, cellVMs: newVMs },\r\n                payload: { ...arg.payload, data: { cursorPos: CursorPos.Current, cellId: arg.payload.data.id } }\r\n            });\r\n        }\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function deleteCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\r\n        const cells = arg.prevState.cellVMs;\r\n        if (cells.length === 1 && cells[0].cell.id === arg.payload.data.cellId) {\r\n            // Special case, if this is the last cell, don't delete it, just clear it's output and input\r\n            const newVM: ICellViewModel = {\r\n                cell: createEmptyCell(arg.payload.data.cellId, null),\r\n                editable: true,\r\n                inputBlockOpen: true,\r\n                inputBlockShow: true,\r\n                inputBlockText: '',\r\n                inputBlockCollapseNeeded: false,\r\n                selected: cells[0].selected,\r\n                focused: cells[0].focused,\r\n                cursorPos: CursorPos.Current,\r\n                hasBeenRun: false,\r\n                scrollCount: 0,\r\n                runningByLine: DebugState.Design\r\n            };\r\n\r\n            // Send messages to other side to indicate the new add\r\n            Transfer.postModelRemove(arg, 0, cells[0].cell);\r\n            Transfer.postModelInsert(arg, 0, newVM.cell);\r\n\r\n            return {\r\n                ...arg.prevState,\r\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\r\n                cellVMs: [newVM]\r\n            };\r\n        } else if (arg.payload.data.cellId) {\r\n            // Otherwise just a straight delete\r\n            const index = arg.prevState.cellVMs.findIndex((c) => c.cell.id === arg.payload.data.cellId);\r\n            if (index >= 0) {\r\n                Transfer.postModelRemove(arg, 0, cells[index].cell);\r\n\r\n                // Recompute select/focus if this item has either\r\n                const previousSelection = getSelectedAndFocusedInfo(arg.prevState);\r\n                const newVMs = [...arg.prevState.cellVMs.filter((c) => c.cell.id !== arg.payload.data.cellId)];\r\n                const nextOrPrev = index === arg.prevState.cellVMs.length - 1 ? index - 1 : index;\r\n                if (\r\n                    previousSelection.selectedCellId === arg.payload.data.cellId ||\r\n                    previousSelection.focusedCellId === arg.payload.data.cellId\r\n                ) {\r\n                    if (nextOrPrev >= 0) {\r\n                        newVMs[nextOrPrev] = {\r\n                            ...newVMs[nextOrPrev],\r\n                            selected: true,\r\n                            focused: previousSelection.focusedCellId === arg.payload.data.cellId\r\n                        };\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    ...arg.prevState,\r\n                    cellVMs: newVMs,\r\n                    undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\r\n                    skipNextScroll: true\r\n                };\r\n            }\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function loadAllCells(arg: NativeEditorReducerArg<ILoadAllCells>): IMainState {\r\n        const vms = arg.payload.data.cells.map((c) => prepareCellVM(c, false, arg.prevState.settings));\r\n        return {\r\n            ...arg.prevState,\r\n            busy: false,\r\n            loadTotal: arg.payload.data.cells.length,\r\n            undoStack: [],\r\n            cellVMs: vms,\r\n            loaded: true,\r\n            isNotebookTrusted: arg.payload.data.isNotebookTrusted!\r\n        };\r\n    }\r\n\r\n    export function unmount(arg: NativeEditorReducerArg): IMainState {\r\n        return {\r\n            ...arg.prevState,\r\n            cellVMs: [],\r\n            undoStack: [],\r\n            redoStack: []\r\n        };\r\n    }\r\n\r\n    function handleUndoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\r\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\r\n        // messages to be posted back (as were handling a message from the extension here)\r\n        const disabledQueueArg = { ...arg, queueAction: noop };\r\n        switch (arg.payload.data.kind) {\r\n            case 'clear':\r\n                return loadAllCells({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\r\n                });\r\n            case 'edit':\r\n                return applyCellEdit({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.reverse } }\r\n                });\r\n            case 'insert':\r\n                return deleteCell({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\r\n                });\r\n            case 'remove':\r\n                const cellBelow =\r\n                    arg.prevState.cellVMs.length > arg.payload.data.index\r\n                        ? arg.prevState.cellVMs[arg.payload.data.index].cell\r\n                        : undefined;\r\n                return insertExistingAbove({\r\n                    ...disabledQueueArg,\r\n                    payload: {\r\n                        ...arg.payload,\r\n                        data: { cell: arg.payload.data.cell, cellId: cellBelow ? cellBelow.id : undefined }\r\n                    }\r\n                });\r\n            case 'remove_all':\r\n                return loadAllCells({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { cells: arg.payload.data.oldCells } }\r\n                });\r\n            case 'swap':\r\n                return Movement.swapCells({\r\n                    ...disabledQueueArg,\r\n                    payload: {\r\n                        ...arg.payload,\r\n                        data: {\r\n                            firstCellId: arg.payload.data.secondCellId,\r\n                            secondCellId: arg.payload.data.firstCellId\r\n                        }\r\n                    }\r\n                });\r\n            case 'modify':\r\n                // Undo for modify should reapply the outputs. Go through each and apply the update\r\n                let result = arg.prevState;\r\n                arg.payload.data.oldCells.forEach((c) => {\r\n                    result = updateCell({\r\n                        ...disabledQueueArg,\r\n                        prevState: result,\r\n                        payload: { ...arg.payload, data: c }\r\n                    });\r\n                });\r\n                return result;\r\n\r\n            default:\r\n                // File, version can be ignored.\r\n                break;\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    function handleRedoModel(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\r\n        // Disable the queueAction in the arg so that calling other reducers doesn't cause\r\n        // messages to be posted back (as were handling a message from the extension here)\r\n        const disabledQueueArg = { ...arg, queueAction: noop };\r\n        switch (arg.payload.data.kind) {\r\n            case 'clear':\r\n                // tslint:disable-next-line: no-any\r\n                return Execution.clearAllOutputs(disabledQueueArg as any);\r\n            case 'edit':\r\n                return applyCellEdit({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { id: arg.payload.data.id, changes: arg.payload.data.forward } }\r\n                });\r\n            case 'insert':\r\n                return insertExistingAbove({\r\n                    ...disabledQueueArg,\r\n                    payload: {\r\n                        ...arg.payload,\r\n                        data: { cell: arg.payload.data.cell, cellId: arg.payload.data.codeCellAboveId }\r\n                    }\r\n                });\r\n            case 'remove':\r\n                return deleteCell({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { cellId: arg.payload.data.cell.id } }\r\n                });\r\n            case 'remove_all':\r\n                return deleteAllCells({\r\n                    ...disabledQueueArg,\r\n                    payload: { ...arg.payload, data: { newCellId: arg.payload.data.newCellId } }\r\n                });\r\n            case 'swap':\r\n                return Movement.swapCells({\r\n                    ...disabledQueueArg,\r\n                    payload: {\r\n                        ...arg.payload,\r\n                        data: {\r\n                            firstCellId: arg.payload.data.secondCellId,\r\n                            secondCellId: arg.payload.data.firstCellId\r\n                        }\r\n                    }\r\n                });\r\n            case 'modify':\r\n                // Redo for modify should reapply the outputs. Go through each and apply the update\r\n                let result = arg.prevState;\r\n                arg.payload.data.newCells.forEach((c) => {\r\n                    result = updateCell({\r\n                        ...disabledQueueArg,\r\n                        prevState: result,\r\n                        payload: { ...arg.payload, data: c }\r\n                    });\r\n                });\r\n                return result;\r\n            default:\r\n                // Modify, file, version can all be ignored.\r\n                break;\r\n        }\r\n\r\n        return arg.prevState;\r\n    }\r\n\r\n    export function handleUpdate(arg: NativeEditorReducerArg<NotebookModelChange>): IMainState {\r\n        switch (arg.payload.data.source) {\r\n            case 'undo':\r\n                return handleUndoModel(arg);\r\n            case 'redo':\r\n                return handleRedoModel(arg);\r\n            default:\r\n                break;\r\n        }\r\n        return arg.prevState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\r\nimport { CssMessages, SharedMessages } from '../../../../client/datascience/messages';\r\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\r\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\r\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\r\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\r\nimport { INativeEditorActionMapping } from '../mapping';\r\nimport { Creation } from './creation';\r\nimport { Effects } from './effects';\r\nimport { Execution } from './execution';\r\nimport { Movement } from './movement';\r\n\r\n// The list of reducers. 1 per message/action.\r\nexport const reducerMap: Partial<INativeEditorActionMapping> = {\r\n    // State updates\r\n    [CommonActionType.INSERT_ABOVE_AND_FOCUS_NEW_CELL]: Creation.insertAboveAndFocusCell,\r\n    [CommonActionType.INSERT_ABOVE_FIRST_AND_FOCUS_NEW_CELL]: Creation.insertAboveFirstAndFocusCell,\r\n    [CommonActionType.INSERT_BELOW_AND_FOCUS_NEW_CELL]: Creation.insertBelowAndFocusCell,\r\n    [CommonActionType.INSERT_ABOVE]: Creation.insertNewAbove,\r\n    [CommonActionType.INSERT_ABOVE_FIRST]: Creation.insertAboveFirst,\r\n    [CommonActionType.INSERT_BELOW]: Creation.insertBelow,\r\n    [CommonActionType.FOCUS_CELL]: Effects.focusCell,\r\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\r\n    [CommonActionType.ADD_AND_FOCUS_NEW_CELL]: Creation.addAndFocusCell,\r\n    [CommonActionType.ADD_NEW_CELL]: Creation.addNewCell,\r\n    [CommonActionType.EXECUTE_CELL_AND_ADVANCE]: Execution.executeCellAndAdvance,\r\n    [CommonActionType.EXECUTE_CELL]: Execution.executeCell,\r\n    [CommonActionType.EXECUTE_ALL_CELLS]: Execution.executeAllCells,\r\n    [CommonActionType.EXECUTE_ABOVE]: Execution.executeAbove,\r\n    [CommonActionType.EXECUTE_CELL_AND_BELOW]: Execution.executeCellAndBelow,\r\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\r\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\r\n    [InteractiveWindowMessages.ClearAllOutputs]: Execution.clearAllOutputs,\r\n    [CommonActionType.EXPORT]: Transfer.exportCells,\r\n    [CommonActionType.EXPORT_NOTEBOOK_AS]: Transfer.showExportAsMenu,\r\n    [CommonActionType.SAVE]: Transfer.save,\r\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\r\n    [CommonActionType.SEND_COMMAND]: Transfer.sendCommand,\r\n    [CommonActionType.SELECT_CELL]: Effects.selectCell,\r\n    [InteractiveWindowMessages.SelectKernel]: Kernel.selectKernel,\r\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\r\n    [CommonActionType.MOVE_CELL_UP]: Movement.moveCellUp,\r\n    [CommonActionType.MOVE_CELL_DOWN]: Movement.moveCellDown,\r\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\r\n    [CommonActionType.TOGGLE_LINE_NUMBERS]: Effects.toggleLineNumbers,\r\n    [CommonActionType.TOGGLE_OUTPUT]: Effects.toggleOutput,\r\n    [CommonActionType.CHANGE_CELL_TYPE]: Execution.changeCellType,\r\n    [InteractiveWindowMessages.Undo]: Execution.undo,\r\n    [InteractiveWindowMessages.Redo]: Execution.redo,\r\n    [CommonActionType.ARROW_UP]: Movement.arrowUp,\r\n    [CommonActionType.ARROW_DOWN]: Movement.arrowDown,\r\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\r\n    [InteractiveWindowMessages.ShowPlot]: Transfer.showPlot,\r\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\r\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\r\n    [CommonActionType.LOADED_ALL_CELLS]: Transfer.loadedAllCells,\r\n    [CommonActionType.LAUNCH_NOTEBOOK_TRUST_PROMPT]: Transfer.launchNotebookTrustPrompt,\r\n    [CommonActionType.UNMOUNT]: Creation.unmount,\r\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_SUCCESS]: CommonEffects.handleLoadIPyWidgetClassSuccess,\r\n    [CommonActionType.LOAD_IPYWIDGET_CLASS_FAILURE]: CommonEffects.handleLoadIPyWidgetClassFailure,\r\n    [CommonActionType.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED]: CommonEffects.notifyAboutUnsupportedWidgetVersions,\r\n    [CommonActionType.CONTINUE]: Execution.continueExec,\r\n    [CommonActionType.STEP]: Execution.step,\r\n    [CommonActionType.RUN_BY_LINE]: Execution.runByLine,\r\n    [CommonActionType.OPEN_SETTINGS]: CommonEffects.openSettings,\r\n\r\n    // Messages from the webview (some are ignored)\r\n    [InteractiveWindowMessages.StartCell]: Creation.startCell,\r\n    [InteractiveWindowMessages.FinishCell]: Creation.finishCell,\r\n    [InteractiveWindowMessages.UpdateCellWithExecutionResults]: Creation.updateCell,\r\n    [InteractiveWindowMessages.NotebookDirty]: CommonEffects.notebookDirty,\r\n    [InteractiveWindowMessages.NotebookClean]: CommonEffects.notebookClean,\r\n    [InteractiveWindowMessages.LoadAllCells]: Creation.loadAllCells,\r\n    [InteractiveWindowMessages.TrustNotebookComplete]: CommonEffects.trustNotebook,\r\n    [InteractiveWindowMessages.NotebookRunAllCells]: Execution.executeAllCells,\r\n    [InteractiveWindowMessages.NotebookRunSelectedCell]: Execution.executeSelectedCell,\r\n    [InteractiveWindowMessages.NotebookAddCellBelow]: Creation.addAndFocusCell,\r\n    [InteractiveWindowMessages.DoSave]: Transfer.save,\r\n    [InteractiveWindowMessages.DeleteAllCells]: Creation.deleteAllCells,\r\n    [InteractiveWindowMessages.GetAllCells]: Transfer.getAllCells,\r\n    [InteractiveWindowMessages.GetCellCode]: Transfer.getCellCode,\r\n    [InteractiveWindowMessages.GetAllCellCode]: Transfer.getAllCellCode,\r\n    [InteractiveWindowMessages.Undo]: Execution.undo,\r\n    [InteractiveWindowMessages.Redo]: Execution.redo,\r\n    [InteractiveWindowMessages.StartProgress]: CommonEffects.startProgress,\r\n    [InteractiveWindowMessages.StopProgress]: CommonEffects.stopProgress,\r\n    [SharedMessages.UpdateSettings]: Effects.updateSettings,\r\n    [InteractiveWindowMessages.RestartKernel]: Kernel.handleRestarted,\r\n    [CssMessages.GetCssResponse]: CommonEffects.handleCss,\r\n    [InteractiveWindowMessages.MonacoReady]: CommonEffects.monacoReady,\r\n    [CssMessages.GetMonacoThemeResponse]: CommonEffects.monacoThemeChange,\r\n    [InteractiveWindowMessages.UpdateModel]: Creation.handleUpdate,\r\n    [InteractiveWindowMessages.UpdateKernel]: Kernel.updateStatus,\r\n    [SharedMessages.LocInit]: CommonEffects.handleLocInit,\r\n    [InteractiveWindowMessages.UpdateDisplayData]: CommonEffects.handleUpdateDisplayData,\r\n    [InteractiveWindowMessages.ShowBreak]: Execution.handleBreakState,\r\n    [InteractiveWindowMessages.ShowContinue]: Execution.handleContinue,\r\n    [InteractiveWindowMessages.StartDebugging]: Execution.startDebugging,\r\n    [InteractiveWindowMessages.StopDebugging]: Execution.stopDebugging,\r\n    [InteractiveWindowMessages.UpdateExternalCellButtons]: CommonEffects.handleWebviewButtons,\r\n    [InteractiveWindowMessages.ExecuteExternalCommand]: Transfer.executeExternalCommand\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\n\r\n// This must be on top, do not change. Required by webpack.\r\nimport '../common/main';\r\n// This must be on top, do not change. Required by webpack.\r\n\r\n// tslint:disable-next-line: ordered-imports\r\nimport '../common/index.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { TextAreaFocusTracker } from '../interactive-common/textAreaFocusTracker';\r\nimport { WidgetManagerComponent } from '../ipywidgets/webViews/container';\r\nimport { IVsCodeApi, PostOffice } from '../react-common/postOffice';\r\nimport { detectBaseTheme } from '../react-common/themeDetector';\r\nimport { getConnectedNativeEditor } from './nativeEditor';\r\nimport { createStore } from './redux/store';\r\n\r\n// This special function talks to vscode from a web panel\r\nexport declare function acquireVsCodeApi(): IVsCodeApi;\r\nconst baseTheme = detectBaseTheme();\r\n// tslint:disable-next-line: no-any\r\nconst testMode = (window as any).inTestMode;\r\n// tslint:disable-next-line: no-typeof-undefined\r\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\r\n\r\n// Create the redux store\r\nconst postOffice = new PostOffice();\r\nconst store = createStore(skipDefault, baseTheme, testMode, postOffice);\r\n\r\n// Wire up a connected react control for our NativeEditor\r\nconst ConnectedNativeEditor = getConnectedNativeEditor();\r\n\r\n// Stick them all together\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <TextAreaFocusTracker />\r\n        <ConnectedNativeEditor />\r\n        <WidgetManagerComponent postOffice={postOffice} widgetContainerId={'rootWidget'} store={store} />\r\n    </Provider>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\n\r\nimport * as ReduxCommon from '../../interactive-common/redux/store';\r\nimport { PostOffice } from '../../react-common/postOffice';\r\nimport { reducerMap } from './reducers';\r\n\r\n// This special version uses the reducer map from the INativeEditorMapping\r\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean, postOffice: PostOffice) {\r\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, true, true, reducerMap, postOffice);\r\n}\r\n","module.exports = log4js;","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-panel-button {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-wrapper {\\n  margin: 2px 2px 0px 0px;\\n  position: relative;\\n  min-height: 55px;\\n}\\n.cell-wrapper-focused {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-wrapper-selected {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-menu-bar-outer {\\n  justify-self: right;\\n}\\n.cell-output-wrapper {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.cell-output {\\n  margin-top: 5px;\\n  background: transparent;\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-output-text {\\n  white-space: pre-wrap;\\n  word-break: break-all;\\n  overflow-x: hidden;\\n}\\n.markdown-cell-output-container {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.markdown-cell-output {\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n}\\n.cell-outer-editable {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  margin-top: 0px;\\n}\\n.cell-state-selector {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-state-selector-option {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  background-color: var(--override-background, var(--vscode-editor-background));\\n}\\n.code-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.markdown-editor-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.code-watermark {\\n  top: 5px;\\n  /* Account for extra padding and border in native editor */\\n}\\n.cell-input-wrapper {\\n  grid-column: 3;\\n  grid-row: 1;\\n}\\n.cell-input {\\n  margin: 2px 10px 0px 0px;\\n}\\n.content-div {\\n  grid-column: 3;\\n}\\n.controls-div {\\n  min-width: 34px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  display: block;\\n  grid-column: 2;\\n  grid-row: 1;\\n}\\n.navbar-div {\\n  grid-column: 1;\\n  visibility: hidden;\\n  display: grid;\\n  grid-template-rows: var(--button-size) var(--button-size) auto;\\n}\\n.navbar-add-button {\\n  align-self: end;\\n}\\n.execution-count {\\n  justify-self: end;\\n  margin-bottom: 10px;\\n  margin-top: 1px;\\n}\\n.execution-count-busy-outer {\\n  justify-self: end;\\n}\\n.native-editor-celltoolbar-inner {\\n  justify-self: center;\\n  grid-column: 1;\\n}\\n.native-editor-celltoolbar-middle {\\n  display: flex;\\n  grid-column: 3;\\n  grid-row: 2;\\n  justify-items: left;\\n  background: var(--vscode-notifications-background);\\n}\\n.native-editor-celltoolbar-divider {\\n  background-color: var(--vscode-badge-background);\\n  height: 2px;\\n}\\n.code-toolbar {\\n  visibility: visible;\\n}\\n.markdown-toolbar {\\n  visibility: collapse;\\n}\\n.hover-cell-button {\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .hover-cell-button {\\n  visibility: visible;\\n}\\n.delete-cell-button {\\n  right: 2px;\\n  position: absolute;\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper:hover .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .markdown-toolbar {\\n  visibility: visible;\\n}\\n.native-editor-flyout-button {\\n  width: auto;\\n  height: auto;\\n  border-color: transparent;\\n  background-color: transparent;\\n  padding: 0px;\\n  margin-left: 4px;\\n  margin-right: 0px;\\n  margin-top: 0px;\\n  margin-bottom: 0px;\\n  border-width: 0px;\\n}\\n.native-editor-flyout-button:focus {\\n  outline: none;\\n}\\n.native-editor-cellflyout {\\n  position: relative;\\n  left: 20px;\\n  top: -15px;\\n  width: auto;\\n  height: auto;\\n  padding-top: 2px;\\n  padding-right: 2px;\\n  z-index: 100;\\n}\\n.native-editor-cellflyout-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.native-editor-cellflyout-focused {\\n  background-color: var(--vscode-editorInfo-foreground);\\n}\\n.flyout-button-content {\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n}\\n.native-button {\\n  background: transparent;\\n  z-index: 10;\\n}\\n#toolbar-panel {\\n  margin-top: 2px;\\n  margin-bottom: 2px;\\n  margin-left: 0px;\\n  margin-right: 0px;\\n}\\n#content-panel-div {\\n  overflow: hidden;\\n}\\n/* Fix image buttons that are supposed to be hidden from showing up */\\n.flyout-children-hidden .image-button {\\n  width: 0px;\\n  height: 0px;\\n  margin-left: 0px;\\n  padding: 0px;\\n}\\n.add-cell-line {\\n  display: flex;\\n  justify-content: left;\\n  margin-top: 5px;\\n  margin-bottom: 0px;\\n  margin-left: 5px;\\n  margin-right: 5px;\\n}\\n.add-cell-line:focus-within {\\n  outline: 1px solid black;\\n}\\n.add-cell-line-top {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top-force-visible {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top .add-cell-line-button {\\n  visibility: hidden;\\n}\\n.add-cell-line-button {\\n  border-width: 0px;\\n  border-style: solid;\\n  text-align: center;\\n  line-height: 16px;\\n  background-color: transparent;\\n  cursor: hand;\\n  height: var(--button-size);\\n  padding: 0px;\\n  display: flex;\\n}\\n.add-cell-line-button:focus {\\n  outline: none;\\n}\\n.add-cell-line-top:hover .add-cell-line-button {\\n  visibility: visible;\\n}\\n.add-cell-line-button .image-button-image {\\n  height: var(--button-size);\\n}\\n.add-cell-line-button .image-button-image svg {\\n  height: var(--button-size);\\n}\\n.add-cell-line-divider {\\n  margin-top: 8px;\\n  margin-left: 2px;\\n  width: calc(100% - 40px);\\n  border-width: 0px;\\n  border-top-color: var(--override-badge-background, var(--vscode-badge-background));\\n  border-top-width: 1px;\\n  border-style: solid;\\n}\\n.add-cell-line-divider:hover {\\n  cursor: pointer;\\n}\\n.cell-wrapper-selected .add-cell-line {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .add-cell-line {\\n  visibility: visible;\\n}\\n/*\\nCell Row Container layout\\n--------------------------\\ncollapse-bar        controls-div        [cell-input, cell-output, markdown-cell-output-container]\\n(expanded c-bar)    celltoolbar-middle\\n*/\\n.cell-row-container {\\n  display: grid;\\n  grid-template-columns: auto auto minmax(0, 1fr);\\n  grid-template-rows: 1fr auto;\\n}\\n.collapse-bar {\\n  grid-column: 1;\\n  grid-row-start: 1;\\n  grid-row-end: 2;\\n  background-color: transparent;\\n  max-width: 8px;\\n  min-width: 8px;\\n}\\n.cell-wrapper:hover .collapse-bar {\\n  background-color: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.collapse-bar-markdown {\\n  margin: 0px 44px 0px 0px;\\n}\\n.collapse-bar-output {\\n  margin: 0px 28px 0px 16px;\\n}\\n.collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.cell-wrapper:hover .collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.cell-wrapper:hover .collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n}\\n.add-divider {\\n  visibility: hidden;\\n  margin: 0px;\\n  position: absolute;\\n  bottom: 8px;\\n}\\n.cell-wrapper:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.native-editor-celltoolbar-middle .image-button {\\n  margin-right: 3px;\\n  margin-top: 4px;\\n  margin-bottom: 4px;\\n  margin-left: 3px;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}