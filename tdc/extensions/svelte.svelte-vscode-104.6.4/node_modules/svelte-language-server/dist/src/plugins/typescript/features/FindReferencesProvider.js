"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindReferencesProviderImpl = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const utils_1 = require("../../../utils");
const utils_2 = require("../utils");
const utils_3 = require("./utils");
class FindReferencesProviderImpl {
    constructor(lsAndTsDocResolver) {
        this.lsAndTsDocResolver = lsAndTsDocResolver;
    }
    async findReferences(document, position, context) {
        const { lang, tsDoc } = this.getLSAndTSDoc(document);
        const fragment = await tsDoc.getFragment();
        const references = lang.getReferencesAtPosition(tsDoc.filePath, fragment.offsetAt(fragment.getGeneratedPosition(position)));
        if (!references) {
            return null;
        }
        const docs = new utils_3.SnapshotFragmentMap(this.lsAndTsDocResolver);
        docs.set(tsDoc.filePath, { fragment, snapshot: tsDoc });
        return await Promise.all(references
            .filter((ref) => context.includeDeclaration || !ref.isDefinition)
            .filter(notInGeneratedCode(tsDoc.getFullText()))
            .map(async (ref) => {
            const defDoc = await docs.retrieveFragment(ref.fileName);
            return vscode_languageserver_1.Location.create(utils_1.pathToUrl(ref.fileName), utils_2.convertToLocationRange(defDoc, ref.textSpan));
        }));
    }
    getLSAndTSDoc(document) {
        return this.lsAndTsDocResolver.getLSAndTSDoc(document);
    }
}
exports.FindReferencesProviderImpl = FindReferencesProviderImpl;
function notInGeneratedCode(text) {
    return (ref) => {
        return utils_3.isNoTextSpanInGeneratedCode(text, ref.textSpan);
    };
}
//# sourceMappingURL=FindReferencesProvider.js.map