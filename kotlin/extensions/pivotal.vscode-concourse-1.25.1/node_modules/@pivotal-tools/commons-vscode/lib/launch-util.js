'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListenablePreferenceSetting = exports.activate = void 0;
const VSCode = require("vscode");
const Path = require("path");
const FS = require("fs");
const PortFinder = require("portfinder");
const Net = require("net");
const CommonsCommands = require("./commands");
const vscode_languageclient_1 = require("vscode-languageclient");
const node_1 = require("vscode-languageclient/node");
const vscode_1 = require("vscode");
const vscode_jsonrpc_1 = require("vscode-jsonrpc");
const P2C = require("vscode-languageclient/lib/common/protocolConverter");
const highlight_service_1 = require("./highlight-service");
const util_1 = require("util");
const jvm_launch_utils_1 = require("@pivotal-tools/jvm-launch-utils");
const classpath_1 = require("./classpath");
const code_lens_service_1 = require("./code-lens-service");
const java_data_1 = require("./java-data");
const p2c = P2C.createConverter(undefined, undefined);
PortFinder.basePort = 45556;
const DEBUG_ARG = '-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=y';
function getUserDefinedJvmHeap(wsOpts, dflt) {
    if (!wsOpts) {
        return dflt;
    }
    let javaOptions = wsOpts.get("java");
    return (javaOptions && javaOptions.heap) || dflt;
}
function isCheckingJVM(wsOpts) {
    if (!wsOpts) {
        return true;
    }
    return wsOpts.get("checkJVM");
}
function getUserDefinedJvmArgs(wsOpts) {
    const dflt = [];
    if (!wsOpts) {
        return dflt;
    }
    let javaOptions = wsOpts.get("java");
    return javaOptions && javaOptions.vmargs || dflt;
}
function getUserDefinedJavaHome(wsOpts) {
    if (!wsOpts) {
        return null;
    }
    let javaOptions = wsOpts.get("java");
    return javaOptions && javaOptions.home;
}
function activate(options, context) {
    let DEBUG = options.DEBUG;
    let jvmHeap = getUserDefinedJvmHeap(options.workspaceOptions, options.jvmHeap);
    let jvmArgs = getUserDefinedJvmArgs(options.workspaceOptions);
    if (options.CONNECT_TO_LS) {
        return VSCode.window.showInformationMessage("Start language server")
            .then((x) => connectToLS(context, options));
    }
    else {
        let clientOptions = options.clientOptions;
        var log_output = VSCode.window.createOutputChannel(options.extensionId + "-debug-log");
        log("Activating '" + options.extensionId + "' extension");
        function log(msg) {
            if (log_output) {
                log_output.append(msg + "\n");
            }
        }
        function error(msg) {
            if (log_output) {
                log_output.append("ERR: " + msg + "\n");
            }
        }
        let findJRE = options.preferJdk ? jvm_launch_utils_1.findJdk : jvm_launch_utils_1.findJvm;
        return findJRE(getUserDefinedJavaHome(options.workspaceOptions))
            .catch(error => {
            VSCode.window.showErrorMessage("Error trying to find JVM: " + error);
            return Promise.reject(error);
        })
            .then((jvm) => {
            if (!jvm) {
                VSCode.window.showErrorMessage("Couldn't locate java in $JAVA_HOME or $PATH");
                return;
            }
            let javaExecutablePath = jvm.getJavaExecutable();
            log("Found java exe: " + javaExecutablePath);
            let version = jvm.getMajorVersion();
            if (version < 11) {
                VSCode.window.showErrorMessage(`Spring Tools Language Server requires Java 11 or higher to be launched. Current Java ${javaExecutablePath}.\n
                    \n
                    (Note Java 8 can still be used in your own projects. Java 11 is only required to launch the Spring Tools Language Server process)`, {});
                return;
            }
            log("isJavaEightOrHigher => true");
            function createServer() {
                return new Promise((resolve, reject) => {
                    PortFinder.getPort((err, port) => {
                        Net.createServer(socket => {
                            log('Child process connected on port ' + port);
                            resolve({
                                reader: socket,
                                writer: socket
                            });
                        })
                            .listen(port, () => {
                            let processLaunchoptions = {
                                cwd: VSCode.workspace.rootPath
                            };
                            let logfile = options.workspaceOptions.get("logfile") || "/dev/null";
                            //The logfile = '/dev/null' is handled specifically by the language server process so it works on all OSs.
                            log('Redirecting server logs to ' + logfile);
                            const args = [
                                '-Dspring.lsp.client-port=' + port,
                                '-Dserver.port=' + port,
                                '-Dsts.lsp.client=vscode',
                                '-Dsts.log.file=' + logfile,
                                '-XX:TieredStopAtLevel=1'
                            ];
                            if (isCheckingJVM(options.workspaceOptions) && options.checkjvm) {
                                options.checkjvm(context, jvm);
                            }
                            if (jvmHeap && !hasHeapArg(jvmArgs)) {
                                args.unshift("-Xmx" + jvmHeap);
                            }
                            if (jvmArgs) {
                                args.unshift(...jvmArgs);
                            }
                            if (DEBUG) {
                                args.unshift(DEBUG_ARG);
                            }
                            let child = null;
                            if (options.explodedLsJarData) {
                                const explodedLsJarData = options.explodedLsJarData;
                                const lsRoot = Path.resolve(context.extensionPath, explodedLsJarData.lsLocation);
                                // Add config file if needed
                                if (explodedLsJarData.configFileName) {
                                    args.push(`-Dspring.config.location=file:${Path.resolve(lsRoot, `BOOT-INF/classes/${explodedLsJarData.configFileName}`)}`);
                                }
                                // Add classpath
                                const classpath = [];
                                classpath.push(Path.resolve(lsRoot, 'BOOT-INF/classes'));
                                classpath.push(`${Path.resolve(lsRoot, 'BOOT-INF/lib')}${Path.sep}*`);
                                child = jvm.mainClassLaunch(explodedLsJarData.mainClass, classpath, args, processLaunchoptions);
                            }
                            else {
                                // Start the child java process
                                const launcher = findServerJar(Path.resolve(context.extensionPath, 'jars'));
                                child = jvm.jarLaunch(launcher, args, processLaunchoptions);
                            }
                            if (child) {
                                child.stdout.on('data', (data) => {
                                    log("" + data);
                                });
                                child.stderr.on('data', (data) => {
                                    error("" + data);
                                });
                            }
                        });
                    });
                });
            }
            return setupLanguageClient(context, createServer, options);
        });
    }
}
exports.activate = activate;
function hasHeapArg(vmargs) {
    if (vmargs) {
        return vmargs.some(a => a.startsWith("-Xmx"));
    }
    return false;
}
function findServerJar(jarsDir) {
    let serverJars = FS.readdirSync(jarsDir).filter(jar => jar.indexOf('language-server') >= 0 &&
        jar.endsWith(".jar"));
    if (serverJars.length == 0) {
        throw new Error("Server jar not found in " + jarsDir);
    }
    if (serverJars.length > 1) {
        throw new Error("Multiple server jars found in " + jarsDir);
    }
    return Path.resolve(jarsDir, serverJars[0]);
}
function connectToLS(context, options) {
    let connectionInfo = {
        port: 5007
    };
    let serverOptions = () => {
        let socket = Net.connect(connectionInfo);
        let result = {
            writer: socket,
            reader: socket
        };
        return Promise.resolve(result);
    };
    return setupLanguageClient(context, serverOptions, options);
}
function setupLanguageClient(context, createServer, options) {
    // Create the language client and start the client.
    let client = new node_1.LanguageClient(options.extensionId, options.extensionId, createServer, options.clientOptions);
    client.registerProposedFeatures();
    util_1.log("Proposed protocol extensions loaded!");
    if (options.TRACE) {
        client.trace = vscode_jsonrpc_1.Trace.Verbose;
    }
    let progressNotification = new vscode_jsonrpc_1.NotificationType("sts/progress");
    let highlightNotification = new vscode_jsonrpc_1.NotificationType("sts/highlight");
    let moveCursorRequest = new vscode_languageclient_1.RequestType("sts/moveCursor");
    let disposable = client.start();
    const codeLensListanableSetting = options.highlightCodeLensSettingKey ? new ListenablePreferenceSetting(options.highlightCodeLensSettingKey) : undefined;
    let progressService = new ProgressService();
    let highlightService = new highlight_service_1.HighlightService();
    const codelensService = new code_lens_service_1.HighlightCodeLensProvider();
    let codeLensProviderSubscription;
    CommonsCommands.registerCommands(context);
    context.subscriptions.push(disposable);
    context.subscriptions.push(progressService);
    context.subscriptions.push(highlightService);
    function toggleHighlightCodeLens() {
        if (!codeLensProviderSubscription && codeLensListanableSetting.value) {
            codeLensProviderSubscription = VSCode.languages.registerCodeLensProvider(options.clientOptions.documentSelector, codelensService);
            context.subscriptions.push(codeLensProviderSubscription);
        }
        else if (codeLensProviderSubscription) {
            codeLensProviderSubscription.dispose();
            const idx = context.subscriptions.indexOf(codeLensProviderSubscription);
            if (idx >= 0) {
                context.subscriptions.splice(idx, 1);
            }
            codeLensProviderSubscription = null;
        }
    }
    if (codeLensListanableSetting) {
        toggleHighlightCodeLens();
        codeLensListanableSetting.onDidChangeValue(() => toggleHighlightCodeLens());
    }
    return client.onReady().then(() => {
        client.onNotification(progressNotification, (params) => {
            progressService.handle(params);
        });
        client.onNotification(highlightNotification, (params) => {
            highlightService.handle(params);
            if (codeLensListanableSetting && codeLensListanableSetting.value) {
                codelensService.handle(params);
            }
        });
        client.onRequest(moveCursorRequest, (params) => {
            let editors = VSCode.window.visibleTextEditors;
            for (let editor of editors) {
                if (editor.document.uri.toString() == params.uri) {
                    let cursor = p2c.asPosition(params.position);
                    let selection = new VSCode.Selection(cursor, cursor);
                    editor.selections = [selection];
                }
            }
            return { applied: true };
        });
        classpath_1.registerClasspathService(client);
        java_data_1.registerJavaDataService(client);
        return client;
    });
}
function correctBinname(binname) {
    if (process.platform === 'win32')
        return binname + '.exe';
    else
        return binname;
}
class ProgressHandle {
    constructor(progress, finish) {
        this.progress = progress;
        this.finish = finish;
    }
    updateStatus(message, increment) {
        this.progress.report({
            message,
            increment
        });
    }
    complete() {
        this.finish();
    }
}
class ProgressService {
    constructor() {
        this.status = new Map();
    }
    handle(params) {
        const progressHandler = this.status.get(params.id);
        if (progressHandler) {
            if (params.statusMsg) {
                progressHandler.updateStatus(params.statusMsg, -1);
            }
            else {
                progressHandler.complete();
            }
        }
        else {
            if (params.statusMsg) {
                vscode_1.window.withProgress({
                    location: vscode_1.ProgressLocation.Notification,
                    title: "",
                    cancellable: false
                }, progress => new Promise(resolve => {
                    this.status.set(params.id, new ProgressHandle(progress, resolve));
                    progress.report({
                        message: params.statusMsg,
                        increment: -1
                    });
                }));
            }
        }
    }
    dispose() {
        if (this.status) {
            for (let handler of this.status.values()) {
                handler.complete();
            }
        }
        this.status = null;
    }
}
class ListenablePreferenceSetting {
    constructor(section) {
        this.section = section;
        this._onDidChangeValue = new vscode_1.EventEmitter();
        VSCode.workspace.onDidChangeConfiguration(e => {
            console.log('Settings changed! value = ' + this.value);
            if (e.affectsConfiguration(this.section)) {
                this._onDidChangeValue.fire();
            }
        });
    }
    get value() {
        return VSCode.workspace.getConfiguration().get(this.section);
    }
    get onDidChangeValue() {
        return this._onDidChangeValue.event;
    }
}
exports.ListenablePreferenceSetting = ListenablePreferenceSetting;
//# sourceMappingURL=launch-util.js.map