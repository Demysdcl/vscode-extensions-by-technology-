/// <reference types="node" />
import * as ChildProcess from 'child_process';
export interface JVM {
    /**
     * 8 = Java 1.8.x, 9 = Java 9.x, etc
     */
    getMajorVersion(): number;
    /**
     * Path to the Java executable
     */
    getJavaExecutable(): string;
    /**
     * Path to the corresponding 'java home' for the executable.
     */
    getJavaHome(): string;
    /**
     * Detect whether this JVM is a JDK
     */
    isJdk(): boolean;
    /**
     * Find tools.jar for this JVM.
     *
     * Note that if the JVM is a JRE; or a Java 9 or above JDK;
     * then this will return null.
     */
    getToolsJar(): string | null;
    /**
     * Launch an executable jar with this jvm.
     * This autmatically adds tools.jar to the classpath if available.
     * WARNING: For adding tools jar to work properly, the jar must be packaged
     * using spring-boot-maven-plugin ZIP layout.
     */
    jarLaunch(jar: string, vmargs?: string[], execFileOptions?: ChildProcess.ExecFileOptions): ChildProcess.ChildProcess;
}
/**
 * Find a JVM by looking in the JAVA_HOME and PATH environment variables.
 *
 * Optionally, a specific javaHome can be passed in. This shortcuts the
 * search logic and uses that javaHome as is.
 *
 * The returned JVM may or may not be a JDK. Methods are provided to obtain corresponding
 * toolsjar and to check whether the JVM is a JDK.
 */
export declare function findJvm(javaHome?: string): Promise<JVM | null>;
/**
 * Like findJvm, but additionally, if the found JVM is not a JDK tries to
 * find a companion JDK that may be installed alongside it.
 */
export declare function findJdk(javaHome?: string): Promise<JVM | null>;
